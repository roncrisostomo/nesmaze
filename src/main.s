;
; File generated by cc65 v 2.16 - Git 820b4db
;
	.fopt		compiler,"cc65 v 2.16 - Git 820b4db"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "scripts\main.c", 2770, 1511076572
	.dbg		file, "scripts/lib/neslib.h", 8325, 1510735219
	.dbg		file, "scripts/soundsAndMusic/soundsAndMusic.h", 769, 1510971067
	.dbg		file, "scripts/gameConstants.h", 803, 1511081733
	.dbg		file, "scripts/titlePhase.h", 2058, 1511062250
	.dbg		file, "scripts/nametables/title_nam.h", 1338, 1511018643
	.dbg		file, "scripts/gamePhase.h", 18015, 1511082610
	.dbg		file, "scripts/nametables/level_test.h", 3421, 1511082180
	.dbg		file, "scripts/nametables/level_test2.h", 4436, 1511082138
	.dbg		file, "scripts/nametables/level_test3.h", 4242, 1511082083
	.dbg		file, "scripts/resultPhase.h", 2304, 1511080893
	.dbg		file, "scripts/nametables/result_success.h", 796, 1511079353
	.dbg		file, "scripts/nametables/result_failure.h", 554, 1510970384
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_col", "00", extern, "_pal_col"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_frame", "00", extern, "_ppu_wait_frame"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "ppu_on_bg", "00", extern, "_ppu_on_bg"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "music_play", "00", extern, "_music_play"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "music_pause", "00", extern, "_music_pause"
	.dbg		sym, "sfx_play", "00", extern, "_sfx_play"
	.dbg		sym, "pad_trigger", "00", extern, "_pad_trigger"
	.dbg		sym, "pad_state", "00", extern, "_pad_state"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "bank_bg", "00", extern, "_bank_bg"
	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_put", "00", extern, "_vram_put"
	.dbg		sym, "vram_read", "00", extern, "_vram_read"
	.dbg		sym, "vram_write", "00", extern, "_vram_write"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "delay", "00", extern, "_delay"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_on_bg
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_trigger
	.import		_pad_state
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_read
	.import		_vram_write
	.import		_vram_unrle
	.import		_memcpy
	.import		_delay
	.export		_pal_fade_to
	.export		_title_nam
	.export		_palTitle
	.export		_titlePhase
	.export		_level_test
	.export		_level_test2
	.export		_level_test3
	.export		_pal_level_test
	.export		_palGameSpr
	.export		_hudLabels
	.export		_playerMetasprite
	.export		_enemyMetasprite
	.export		_updateListData
	.export		_incrementTotalItemsCollected
	.export		_updateHUD
	.export		_checkPlayerMove
	.export		_initGameMap
	.export		_gamePhase
	.export		_result_success
	.export		_result_failure
	.export		_resultPhase
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"

.segment	"RODATA"

_title_nam:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$C4
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$B3
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$42
	.byte	$43
	.byte	$B4
	.byte	$40
	.byte	$41
	.byte	$B4
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$B1
	.byte	$B1
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$40
	.byte	$41
	.byte	$B3
	.byte	$42
	.byte	$43
	.byte	$B4
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$0C
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$B1
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$42
	.byte	$43
	.byte	$B1
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$CF
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$02
	.byte	$35
	.byte	$A6
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$5D
	.byte	$12
	.byte	$10
	.byte	$11
	.byte	$17
	.byte	$00
	.byte	$32
	.byte	$2F
	.byte	$2E
	.byte	$00
	.byte	$02
	.byte	$94
	.byte	$FF
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$02
	.byte	$02
	.byte	$F3
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$00
_palTitle:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_level_test:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$47
	.byte	$D4
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$2C
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$09
	.byte	$25
	.byte	$38
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$09
	.byte	$29
	.byte	$34
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0D
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0D
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$0D
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$0D
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$33
	.byte	$44
	.byte	$01
	.byte	$0A
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$0B
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$BF
	.byte	$AF
	.byte	$01
	.byte	$05
	.byte	$EF
	.byte	$BB
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$E6
	.byte	$BB
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$EE
	.byte	$BB
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$EE
	.byte	$BB
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$EE
	.byte	$BA
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$EE
	.byte	$0F
	.byte	$01
	.byte	$06
	.byte	$0F
	.byte	$01
	.byte	$00
_level_test2:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$47
	.byte	$D4
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$2C
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$25
	.byte	$38
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$29
	.byte	$34
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$05
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0B
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0B
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$05
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$05
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$33
	.byte	$44
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$BF
	.byte	$AF
	.byte	$01
	.byte	$04
	.byte	$BF
	.byte	$EF
	.byte	$BB
	.byte	$EA
	.byte	$FA
	.byte	$FA
	.byte	$AA
	.byte	$AA
	.byte	$BB
	.byte	$E6
	.byte	$BB
	.byte	$AA
	.byte	$AA
	.byte	$AE
	.byte	$EB
	.byte	$BE
	.byte	$AB
	.byte	$EE
	.byte	$BB
	.byte	$AA
	.byte	$EA
	.byte	$BA
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$EE
	.byte	$BB
	.byte	$EE
	.byte	$AB
	.byte	$AE
	.byte	$FB
	.byte	$FA
	.byte	$BA
	.byte	$EE
	.byte	$BA
	.byte	$EE
	.byte	$AA
	.byte	$01
	.byte	$04
	.byte	$EE
	.byte	$0F
	.byte	$01
	.byte	$06
	.byte	$0F
	.byte	$01
	.byte	$00
_level_test3:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$47
	.byte	$D4
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$2C
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$44
	.byte	$10
	.byte	$44
	.byte	$25
	.byte	$38
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$29
	.byte	$34
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$33
	.byte	$44
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$44
	.byte	$01
	.byte	$05
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$FF
	.byte	$BF
	.byte	$AF
	.byte	$01
	.byte	$03
	.byte	$FF
	.byte	$F3
	.byte	$FF
	.byte	$BB
	.byte	$EA
	.byte	$FA
	.byte	$AA
	.byte	$AA
	.byte	$BB
	.byte	$F6
	.byte	$FF
	.byte	$BB
	.byte	$AA
	.byte	$AA
	.byte	$EB
	.byte	$BE
	.byte	$AB
	.byte	$FF
	.byte	$FF
	.byte	$AA
	.byte	$EA
	.byte	$BA
	.byte	$AA
	.byte	$AA
	.byte	$EA
	.byte	$FF
	.byte	$FF
	.byte	$EE
	.byte	$AB
	.byte	$AE
	.byte	$FA
	.byte	$BA
	.byte	$EE
	.byte	$FF
	.byte	$FA
	.byte	$FE
	.byte	$AA
	.byte	$01
	.byte	$03
	.byte	$EE
	.byte	$FF
	.byte	$0F
	.byte	$01
	.byte	$06
	.byte	$0F
	.byte	$01
	.byte	$00
_pal_level_test:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_palGameSpr:
	.byte	$0F
	.byte	$0F
	.byte	$29
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$24
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$21
	.byte	$30
_hudLabels:
	.byte	$2D
	.byte	$2F
	.byte	$2E
	.byte	$25
	.byte	$39
	.byte	$33
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$23
	.byte	$2C
	.byte	$25
	.byte	$21
	.byte	$32
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$05
_playerMetasprite:
	.byte	$00
	.byte	$FF
	.byte	$49
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$4B
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$4C
	.byte	$00
	.byte	$80
_enemyMetasprite:
	.byte	$00
	.byte	$FF
	.byte	$4D
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$4F
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$50
	.byte	$00
	.byte	$80
_updateListData:
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$4B
	.byte	$05
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$60
	.byte	$57
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$FF
_result_success:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$EA
	.byte	$C2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$D4
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$4D
	.byte	$37
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$37
	.byte	$B5
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$34
	.byte	$02
	.byte	$02
	.byte	$B2
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$1E
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$D3
	.byte	$37
	.byte	$B5
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$B5
	.byte	$00
	.byte	$1C
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$D3
	.byte	$37
	.byte	$D3
	.byte	$37
	.byte	$D3
	.byte	$D3
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$B5
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$27
	.byte	$B5
	.byte	$00
	.byte	$02
	.byte	$49
	.byte	$27
	.byte	$2F
	.byte	$34
	.byte	$00
	.byte	$02
	.byte	$7B
	.byte	$2C
	.byte	$2F
	.byte	$2F
	.byte	$34
	.byte	$33
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$18
	.byte	$B5
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$B5
	.byte	$B5
	.byte	$00
	.byte	$B5
	.byte	$00
	.byte	$02
	.byte	$1C
	.byte	$50
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$03
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$0C
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$02
	.byte	$00
_result_failure:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$88
	.byte	$21
	.byte	$21
	.byte	$D3
	.byte	$D3
	.byte	$C2
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$D3
	.byte	$37
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$21
	.byte	$01
	.byte	$03
	.byte	$D3
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$B5
	.byte	$37
	.byte	$B5
	.byte	$37
	.byte	$B5
	.byte	$37
	.byte	$C6
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$21
	.byte	$B5
	.byte	$00
	.byte	$21
	.byte	$D3
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$B5
	.byte	$00
	.byte	$37
	.byte	$B5
	.byte	$37
	.byte	$00
	.byte	$2F
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$DF
	.byte	$44
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$1F
	.byte	$00
	.byte	$01
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_frameCounter:
	.res	1,$00
_input:
	.res	1,$00
_wait:
	.res	1,$00
_px:
	.res	1,$00
_py:
	.res	1,$00
_ptr:
	.res	1,$00
_spr:
	.res	1,$00
_i16:
	.res	2,$00
_gameDone:
	.res	1,$00
_gameClear:
	.res	1,$00
_gamePaused:
	.res	1,$00
_gameLevel:
	.res	1,$00
_bright:
	.res	1,$00
_totalItemsCollected5:
	.res	1,$00
_totalItemsCollected4:
	.res	1,$00
_totalItemsCollected3:
	.res	1,$00
_totalItemsCollected2:
	.res	1,$00
_totalItemsCollected1:
	.res	1,$00
.segment	"BSS"
_updateList:
	.res	39,$00
_map:
	.res	208,$00
_nameRow:
	.res	32,$00
_levelItemsCount:
	.res	1,$00
_levelItemsCollected:
	.res	1,$00
_percentCollected:
	.res	1,$00
_player_x:
	.res	2,$00
_player_y:
	.res	2,$00
_player_nextTileX:
	.res	1,$00
_player_nextTileY:
	.res	1,$00
_player_prevTileX:
	.res	1,$00
_player_prevTileY:
	.res	1,$00
_player_dir:
	.res	1,$00
_player_nextDir:
	.res	1,$00
_player_moveCounter:
	.res	2,$00
_player_speed:
	.res	2,$00
_enemy_tileX:
	.res	1,$00
_enemy_tileY:
	.res	1,$00
_exit_tileX:
	.res	1,$00
_exit_tileY:
	.res	1,$00
_levelDone:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ pal_fade_to (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pal_fade_to: near

	.dbg	func, "pal_fade_to", "00", extern, "_pal_fade_to"
	.dbg	sym, "to", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "scripts\main.c", 72
	jsr     pushax
;
; if (!to) music_stop();
;
	.dbg	line, "scripts\main.c", 73
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L000D
	jsr     _music_stop
;
; while (bright != to)
;
	.dbg	line, "scripts\main.c", 75
	jmp     L000D
;
; delay(4);
;
	.dbg	line, "scripts\main.c", 77
L000B:	lda     #$04
	jsr     _delay
;
; if (bright<to)  ++bright;
;
	.dbg	line, "scripts\main.c", 78
	ldx     #$00
	lda     _bright
	ldy     #$00
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L0F3F
	inc     _bright
;
; else    --bright;
;
	.dbg	line, "scripts\main.c", 79
	jmp     L0F3E
L0F3F:	dec     _bright
;
; pal_bright(bright);
;
	.dbg	line, "scripts\main.c", 80
L0F3E:	lda     _bright
	jsr     _pal_bright
;
; while (bright != to)
;
	.dbg	line, "scripts\main.c", 75
L000D:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L000B
	cmp     _bright
	bne     L000B
;
; if (!bright)
;
	.dbg	line, "scripts\main.c", 83
	lda     _bright
	bne     L0018
;
; ppu_off();
;
	.dbg	line, "scripts\main.c", 85
	jsr     _ppu_off
;
; set_vram_update(NULL);
;
	.dbg	line, "scripts\main.c", 86
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; scroll(0,0);
;
	.dbg	line, "scripts\main.c", 87
	jsr     push0
	jsr     _scroll
;
; }
;
	.dbg	line, "scripts\main.c", 89
L0018:	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ titlePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_titlePhase: near

	.dbg	func, "titlePhase", "00", extern, "_titlePhase"

.segment	"CODE"

;
; i = 0;
;
	.dbg	line, "scripts/titlePhase.h", 24
	lda     #$00
	sta     _i
;
; j = 4;
;
	.dbg	line, "scripts/titlePhase.h", 25
	lda     #$04
	sta     _j
;
; pal_bright(i);
;
	.dbg	line, "scripts/titlePhase.h", 28
	lda     _i
	jsr     _pal_bright
;
; scroll(0, 0);
;
	.dbg	line, "scripts/titlePhase.h", 31
	jsr     push0
	jsr     _scroll
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "scripts/titlePhase.h", 34
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_nam);
;
	.dbg	line, "scripts/titlePhase.h", 35
	lda     #<(_title_nam)
	ldx     #>(_title_nam)
	jsr     _vram_unrle
;
; pal_bg(palTitle);
;
	.dbg	line, "scripts/titlePhase.h", 37
	lda     #<(_palTitle)
	ldx     #>(_palTitle)
	jsr     _pal_bg
;
; ppu_on_bg();
;
	.dbg	line, "scripts/titlePhase.h", 39
	jsr     _ppu_on_bg
;
; frameCounter = 0;
;
	.dbg	line, "scripts/titlePhase.h", 42
	lda     #$00
	sta     _frameCounter
;
; ppu_wait_frame();
;
	.dbg	line, "scripts/titlePhase.h", 46
L0142:	jsr     _ppu_wait_frame
;
; if (pad_trigger(0)&PAD_START) break;
;
	.dbg	line, "scripts/titlePhase.h", 49
	lda     #$00
	jsr     _pad_trigger
	and     #$08
	bne     L0143
;
; frameCounter++;
;
	.dbg	line, "scripts/titlePhase.h", 52
	inc     _frameCounter
;
; if (i < j)
;
	.dbg	line, "scripts/titlePhase.h", 56
	lda     _i
	cmp     _j
	bcs     L014B
;
; if (!(frameCounter&7))
;
	.dbg	line, "scripts/titlePhase.h", 59
	lda     _frameCounter
	and     #$07
	bne     L0142
;
; i++;
;
	.dbg	line, "scripts/titlePhase.h", 61
	inc     _i
;
; pal_bright(i);
;
	.dbg	line, "scripts/titlePhase.h", 62
	lda     _i
	jsr     _pal_bright
;
; else
;
	.dbg	line, "scripts/titlePhase.h", 66
	jmp     L0142
;
; pal_col(PRESS_START_PAL_INDEX, (frameCounter&32) ? 0x0f : 0x22);
;
	.dbg	line, "scripts/titlePhase.h", 69
L014B:	lda     #$06
	jsr     pusha
	lda     _frameCounter
	and     #$20
	beq     L0F40
	lda     #$0F
	jmp     L0F41
L0F40:	lda     #$22
L0F41:	jsr     _pal_col
;
; while (1)
;
	.dbg	line, "scripts/titlePhase.h", 44
	jmp     L0142
;
; pal_bright(j);
;
	.dbg	line, "scripts/titlePhase.h", 74
L0143:	lda     _j
	jsr     _pal_bright
;
; sfx_play(SFX_START, 0);
;
	.dbg	line, "scripts/titlePhase.h", 77
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; pal_fade_to(0);
;
	.dbg	line, "scripts/titlePhase.h", 88
	ldx     #$00
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ incrementTotalItemsCollected (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_incrementTotalItemsCollected: near

	.dbg	func, "incrementTotalItemsCollected", "00", extern, "_incrementTotalItemsCollected"

.segment	"CODE"

;
; totalItemsCollected1++;
;
	.dbg	line, "scripts/gamePhase.h", 155
	inc     _totalItemsCollected1
;
; if (totalItemsCollected1 == 10)
;
	.dbg	line, "scripts/gamePhase.h", 156
	lda     _totalItemsCollected1
	cmp     #$0A
	bne     L0F42
;
; totalItemsCollected2++;
;
	.dbg	line, "scripts/gamePhase.h", 158
	inc     _totalItemsCollected2
;
; totalItemsCollected1 = 0;
;
	.dbg	line, "scripts/gamePhase.h", 159
	lda     #$00
	sta     _totalItemsCollected1
;
; if (totalItemsCollected2 == 10)
;
	.dbg	line, "scripts/gamePhase.h", 161
L0F42:	lda     _totalItemsCollected2
	cmp     #$0A
	bne     L0F43
;
; totalItemsCollected3++;
;
	.dbg	line, "scripts/gamePhase.h", 163
	inc     _totalItemsCollected3
;
; totalItemsCollected2 = 0;
;
	.dbg	line, "scripts/gamePhase.h", 164
	lda     #$00
	sta     _totalItemsCollected2
;
; if (totalItemsCollected3 == 10)
;
	.dbg	line, "scripts/gamePhase.h", 166
L0F43:	lda     _totalItemsCollected3
	cmp     #$0A
	bne     L0F44
;
; totalItemsCollected4++;
;
	.dbg	line, "scripts/gamePhase.h", 168
	inc     _totalItemsCollected4
;
; totalItemsCollected3 = 0;
;
	.dbg	line, "scripts/gamePhase.h", 169
	lda     #$00
	sta     _totalItemsCollected3
;
; if (totalItemsCollected4 == 10)
;
	.dbg	line, "scripts/gamePhase.h", 171
L0F44:	lda     _totalItemsCollected4
	cmp     #$0A
	bne     L0F45
;
; totalItemsCollected5++;
;
	.dbg	line, "scripts/gamePhase.h", 173
	inc     _totalItemsCollected5
;
; totalItemsCollected4 = 0;
;
	.dbg	line, "scripts/gamePhase.h", 174
	lda     #$00
	sta     _totalItemsCollected4
;
; if (totalItemsCollected5 == 10)
;
	.dbg	line, "scripts/gamePhase.h", 176
L0F45:	lda     _totalItemsCollected5
	cmp     #$0A
	bne     L0B44
;
; totalItemsCollected1 = 9;
;
	.dbg	line, "scripts/gamePhase.h", 178
	lda     #$09
	sta     _totalItemsCollected1
;
; totalItemsCollected2 = 9;
;
	.dbg	line, "scripts/gamePhase.h", 179
	sta     _totalItemsCollected2
;
; totalItemsCollected3 = 9;
;
	.dbg	line, "scripts/gamePhase.h", 180
	sta     _totalItemsCollected3
;
; totalItemsCollected4 = 9;
;
	.dbg	line, "scripts/gamePhase.h", 181
	sta     _totalItemsCollected4
;
; totalItemsCollected5 = 9;
;
	.dbg	line, "scripts/gamePhase.h", 182
	sta     _totalItemsCollected5
;
; }
;
	.dbg	line, "scripts/gamePhase.h", 184
L0B44:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ updateHUD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateHUD: near

	.dbg	func, "updateHUD", "00", extern, "_updateHUD"

.segment	"CODE"

;
; updateList[27] = 0x10 + totalItemsCollected5;
;
	.dbg	line, "scripts/gamePhase.h", 190
	lda     _totalItemsCollected5
	clc
	adc     #$10
	sta     _updateList+27
;
; updateList[28] = 0x10 + totalItemsCollected4;
;
	.dbg	line, "scripts/gamePhase.h", 191
	lda     _totalItemsCollected4
	clc
	adc     #$10
	sta     _updateList+28
;
; updateList[29] = 0x10 + totalItemsCollected3;
;
	.dbg	line, "scripts/gamePhase.h", 192
	lda     _totalItemsCollected3
	clc
	adc     #$10
	sta     _updateList+29
;
; updateList[30] = 0x10 + totalItemsCollected2;
;
	.dbg	line, "scripts/gamePhase.h", 193
	lda     _totalItemsCollected2
	clc
	adc     #$10
	sta     _updateList+30
;
; updateList[31] = 0x10 + totalItemsCollected1;
;
	.dbg	line, "scripts/gamePhase.h", 194
	lda     _totalItemsCollected1
	clc
	adc     #$10
	sta     _updateList+31
;
; updateList[35] = 0x10 + percentCollected/100;
;
	.dbg	line, "scripts/gamePhase.h", 196
	lda     _percentCollected
	jsr     pusha0
	lda     #$64
	jsr     tosudiva0
	clc
	adc     #$10
	sta     _updateList+35
;
; updateList[36] = 0x10 + percentCollected/10%10;
;
	.dbg	line, "scripts/gamePhase.h", 197
	lda     _percentCollected
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _updateList+36
;
; updateList[37] = 0x10 + percentCollected%10;
;
	.dbg	line, "scripts/gamePhase.h", 198
	lda     _percentCollected
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _updateList+37
;
; }
;
	.dbg	line, "scripts/gamePhase.h", 199
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ checkPlayerMove (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkPlayerMove: near

	.dbg	func, "checkPlayerMove", "00", extern, "_checkPlayerMove"
	.dbg	sym, "dir", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "scripts/gamePhase.h", 204
	jsr     pusha
;
; px = player_x >> TILE_PLUS_FP_BITS;
;
	.dbg	line, "scripts/gamePhase.h", 205
	lda     _player_x+1
	sta     _px
;
; py = player_y >> TILE_PLUS_FP_BITS;
;
	.dbg	line, "scripts/gamePhase.h", 206
	lda     _player_y+1
	sta     _py
;
; if (px == 0 && dir == DIR_LEFT) return;
;
	.dbg	line, "scripts/gamePhase.h", 210
	lda     _px
	bne     L0F4E
	tay
	lda     (sp),y
	cmp     #$40
	beq     L0B71
	jmp     L0F4E
;
; switch (dir)
;
	.dbg	line, "scripts/gamePhase.h", 212
L0F4E:	ldx     #$00
	lda     (sp,x)
;
; }
;
	.dbg	line, "scripts/gamePhase.h", 218
	cmp     #$10
	beq     L0F4B
	cmp     #$20
	beq     L0F4C
	cmp     #$40
	beq     L0F49
	cmp     #$80
	beq     L0F4A
	jmp     L0F4D
;
; case DIR_LEFT: --px; break;
;
	.dbg	line, "scripts/gamePhase.h", 214
L0F49:	dec     _px
	jmp     L0F4D
;
; case DIR_RIGHT: ++px; break;
;
	.dbg	line, "scripts/gamePhase.h", 215
L0F4A:	inc     _px
	jmp     L0F4D
;
; case DIR_UP: --py; break;
;
	.dbg	line, "scripts/gamePhase.h", 216
L0F4B:	dec     _py
	jmp     L0F4D
;
; case DIR_DOWN: ++py; break;
;
	.dbg	line, "scripts/gamePhase.h", 217
L0F4C:	inc     _py
;
; if (map[MAP_ADR(px,py)] == TILE_WALL) return;
;
	.dbg	line, "scripts/gamePhase.h", 220
L0F4D:	lda     _py
	sec
	sbc     #$02
	bcs     L0B92
	dex
L0B92:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _px
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	cmp     #$40
	beq     L0B71
;
; player_nextTileX = px;
;
	.dbg	line, "scripts/gamePhase.h", 222
	lda     _px
	sta     _player_nextTileX
;
; player_nextTileY = py;
;
	.dbg	line, "scripts/gamePhase.h", 223
	lda     _py
	sta     _player_nextTileY
;
; player_moveCounter = TILE_SIZE << FP_BITS;
;
	.dbg	line, "scripts/gamePhase.h", 225
	ldx     #$01
	lda     #$00
	sta     _player_moveCounter
	stx     _player_moveCounter+1
;
; player_dir = dir;
;
	.dbg	line, "scripts/gamePhase.h", 226
	tay
	lda     (sp),y
	sta     _player_dir
;
; player_nextDir = dir;
;
	.dbg	line, "scripts/gamePhase.h", 227
	lda     (sp),y
	sta     _player_nextDir
;
; }
;
	.dbg	line, "scripts/gamePhase.h", 228
L0B71:	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ initGameMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initGameMap: near

	.dbg	func, "initGameMap", "00", extern, "_initGameMap"

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "scripts/gamePhase.h", 234
	jsr     _oam_clear
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "scripts/gamePhase.h", 237
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; switch (gameLevel)
;
	.dbg	line, "scripts/gamePhase.h", 239
	lda     _gameLevel
;
; }
;
	.dbg	line, "scripts/gamePhase.h", 244
	beq     L0BA6
	cmp     #$01
	beq     L0BAA
	jmp     L0BAD
;
; case 0:  vram_unrle(level_test);  break;
;
	.dbg	line, "scripts/gamePhase.h", 241
L0BA6:	lda     #<(_level_test)
	ldx     #>(_level_test)
	jmp     L0F4F
;
; case 1:  vram_unrle(level_test2); break;
;
	.dbg	line, "scripts/gamePhase.h", 242
L0BAA:	lda     #<(_level_test2)
	ldx     #>(_level_test2)
	jmp     L0F4F
;
; default: vram_unrle(level_test3); break;
;
	.dbg	line, "scripts/gamePhase.h", 243
L0BAD:	lda     #<(_level_test3)
	ldx     #>(_level_test3)
L0F4F:	jsr     _vram_unrle
;
; vram_adr(HUD_LABELS_ADR);
;
	.dbg	line, "scripts/gamePhase.h", 247
	ldx     #$20
	lda     #$44
	jsr     _vram_adr
;
; vram_write((unsigned char*)hudLabels, HUD_LABELS_LEN);
;
	.dbg	line, "scripts/gamePhase.h", 248
	lda     #<(_hudLabels)
	ldx     #>(_hudLabels)
	jsr     pushax
	ldx     #$00
	lda     #$17
	jsr     _vram_write
;
; pal_bg(pal_level_test);
;
	.dbg	line, "scripts/gamePhase.h", 251
	lda     #<(_pal_level_test)
	ldx     #>(_pal_level_test)
	jsr     _pal_bg
;
; pal_spr(palGameSpr);
;
	.dbg	line, "scripts/gamePhase.h", 254
	lda     #<(_palGameSpr)
	ldx     #>(_palGameSpr)
	jsr     _pal_spr
;
; i16 = MAP_START_ADR;
;
	.dbg	line, "scripts/gamePhase.h", 257
	ldx     #$20
	lda     #$80
	sta     _i16
	stx     _i16+1
;
; ptr = 0;
;
	.dbg	line, "scripts/gamePhase.h", 258
	lda     #$00
	sta     _ptr
;
; wait = 0;
;
	.dbg	line, "scripts/gamePhase.h", 259
	sta     _wait
;
; levelItemsCount = 0;
;
	.dbg	line, "scripts/gamePhase.h", 260
	sta     _levelItemsCount
;
; levelItemsCollected = 0;
;
	.dbg	line, "scripts/gamePhase.h", 261
	sta     _levelItemsCollected
;
; percentCollected = 0;
;
	.dbg	line, "scripts/gamePhase.h", 262
	sta     _percentCollected
;
; enemy_tileX = 255;
;
	.dbg	line, "scripts/gamePhase.h", 264
	lda     #$FF
	sta     _enemy_tileX
;
; enemy_tileY = 255;
;
	.dbg	line, "scripts/gamePhase.h", 265
	sta     _enemy_tileY
;
; if (gameLevel == 0)
;
	.dbg	line, "scripts/gamePhase.h", 268
	lda     _gameLevel
	bne     L0F51
;
; totalItemsCollected1 = 0;
;
	.dbg	line, "scripts/gamePhase.h", 270
	sta     _totalItemsCollected1
;
; totalItemsCollected2 = 0;
;
	.dbg	line, "scripts/gamePhase.h", 271
	sta     _totalItemsCollected2
;
; totalItemsCollected3 = 0;
;
	.dbg	line, "scripts/gamePhase.h", 272
	sta     _totalItemsCollected3
;
; totalItemsCollected4 = 0;
;
	.dbg	line, "scripts/gamePhase.h", 273
	sta     _totalItemsCollected4
;
; totalItemsCollected5 = 0;
;
	.dbg	line, "scripts/gamePhase.h", 274
	sta     _totalItemsCollected5
;
; for (i = HUD_HEIGHT; i < MAP_HEIGHT+2; ++i)
;
	.dbg	line, "scripts/gamePhase.h", 278
L0F51:	lda     #$02
	sta     _i
L0F52:	lda     _i
	cmp     #$0F
	jcs     L0BE2
;
; vram_adr(i16);
;
	.dbg	line, "scripts/gamePhase.h", 281
	lda     _i16
	ldx     _i16+1
	jsr     _vram_adr
;
; vram_read(nameRow, 32);
;
	.dbg	line, "scripts/gamePhase.h", 282
	lda     #<(_nameRow)
	ldx     #>(_nameRow)
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _vram_read
;
; vram_adr(i16);
;
	.dbg	line, "scripts/gamePhase.h", 284
	lda     _i16
	ldx     _i16+1
	jsr     _vram_adr
;
; for (j = 0; j < MAP_WIDTH<<1; j += 2)
;
	.dbg	line, "scripts/gamePhase.h", 287
	lda     #$00
L0F50:	sta     _j
	cmp     #$20
	jcs     L0BF1
;
; spr = nameRow[j];
;
	.dbg	line, "scripts/gamePhase.h", 289
	ldy     _j
	lda     _nameRow,y
	sta     _spr
;
; }
;
	.dbg	line, "scripts/gamePhase.h", 327
	cmp     #$10
	beq     L0F55
	cmp     #$25
	beq     L0F54
	cmp     #$33
	beq     L0F53
	cmp     #$45
	jeq     L0F56
	jmp     L0F57
;
; player_x = j << TILE_PLUS_FP_BITS >> 1;
;
	.dbg	line, "scripts/gamePhase.h", 301
L0F53:	ldx     _j
	lda     #$00
	jsr     asrax1
	sta     _player_x
	stx     _player_x+1
;
; player_y = i << TILE_PLUS_FP_BITS;
;
	.dbg	line, "scripts/gamePhase.h", 302
	lda     _i
	sta     _player_y+1
	lda     #$00
	sta     _player_y
;
; player_prevTileX = j >> 1;
;
	.dbg	line, "scripts/gamePhase.h", 303
	lda     _j
	lsr     a
	sta     _player_prevTileX
;
; player_prevTileY = i;
;
	.dbg	line, "scripts/gamePhase.h", 304
	lda     _i
	sta     _player_prevTileY
;
; player_dir = DIR_NONE;
;
	.dbg	line, "scripts/gamePhase.h", 305
	lda     #$00
	sta     _player_dir
;
; player_nextDir = DIR_NONE;
;
	.dbg	line, "scripts/gamePhase.h", 306
	sta     _player_nextDir
;
; player_moveCounter = 0;
;
	.dbg	line, "scripts/gamePhase.h", 307
	sta     _player_moveCounter
	sta     _player_moveCounter+1
;
; player_speed = (START_SPEED + SPEED_UP_PER_LEVEL*gameLevel) << FP_BITS;
;
	.dbg	line, "scripts/gamePhase.h", 309
	lda     _gameLevel
	jsr     pusha0
	lda     #$00
	jsr     tosumula0
	clc
	adc     #$02
	bcc     L0C15
	inx
L0C15:	jsr     shlax4
	sta     _player_speed
	stx     _player_speed+1
;
; spr = TILE_EMPTY;
;
	.dbg	line, "scripts/gamePhase.h", 311
	lda     #$44
	sta     _spr
;
; break;
;
	.dbg	line, "scripts/gamePhase.h", 312
	jmp     L0F57
;
; exit_tileX = j >> 1;
;
	.dbg	line, "scripts/gamePhase.h", 315
L0F54:	lda     _j
	lsr     a
	sta     _exit_tileX
;
; exit_tileY = i;
;
	.dbg	line, "scripts/gamePhase.h", 316
	lda     _i
	sta     _exit_tileY
;
; break;
;
	.dbg	line, "scripts/gamePhase.h", 317
	jmp     L0F57
;
; enemy_tileX = j >> 1;
;
	.dbg	line, "scripts/gamePhase.h", 319
L0F55:	lda     _j
	lsr     a
	sta     _enemy_tileX
;
; enemy_tileY = i;
;
	.dbg	line, "scripts/gamePhase.h", 320
	lda     _i
	sta     _enemy_tileY
;
; spr = TILE_EMPTY;
;
	.dbg	line, "scripts/gamePhase.h", 322
	lda     #$44
	sta     _spr
;
; break;
;
	.dbg	line, "scripts/gamePhase.h", 323
	jmp     L0F57
;
; ++levelItemsCount;
;
	.dbg	line, "scripts/gamePhase.h", 325
L0F56:	inc     _levelItemsCount
;
; map[ptr++] = spr;
;
	.dbg	line, "scripts/gamePhase.h", 330
L0F57:	lda     _ptr
	inc     _ptr
	clc
	adc     #<(_map)
	sta     ptr1
	lda     #$00
	adc     #>(_map)
	sta     ptr1+1
	lda     _spr
	ldy     #$00
	sta     (ptr1),y
;
; vram_put(spr);
;
	.dbg	line, "scripts/gamePhase.h", 333
	lda     _spr
	jsr     _vram_put
;
; vram_put(nameRow[j+1]);
;
	.dbg	line, "scripts/gamePhase.h", 335
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L0C31
	inx
L0C31:	sta     ptr1
	txa
	clc
	adc     #>(_nameRow)
	sta     ptr1+1
	ldy     #<(_nameRow)
	lda     (ptr1),y
	jsr     _vram_put
;
; for (j = 0; j < MAP_WIDTH<<1; j += 2)
;
	.dbg	line, "scripts/gamePhase.h", 287
	lda     #$02
	clc
	adc     _j
	jmp     L0F50
;
; i16 += 64; // 32 * 2, with 32 being offset for byte row, and 2 being tile height (2 bytes)
;
	.dbg	line, "scripts/gamePhase.h", 339
L0BF1:	lda     #$40
	clc
	adc     _i16
	sta     _i16
	bcc     L0C34
	inc     _i16+1
;
; for (i = HUD_HEIGHT; i < MAP_HEIGHT+2; ++i)
;
	.dbg	line, "scripts/gamePhase.h", 278
L0C34:	inc     _i
	jmp     L0F52
;
; memcpy(updateList, updateListData, sizeof(updateListData));
;
	.dbg	line, "scripts/gamePhase.h", 343
L0BE2:	lda     #<(_updateList)
	ldx     #>(_updateList)
	jsr     pushax
	lda     #<(_updateListData)
	ldx     #>(_updateListData)
	jsr     pushax
	ldx     #$00
	lda     #$27
	jsr     _memcpy
;
; set_vram_update(updateList);
;
	.dbg	line, "scripts/gamePhase.h", 344
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jmp     _set_vram_update
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ gamePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gamePhase: near

	.dbg	func, "gamePhase", "00", extern, "_gamePhase"

.segment	"CODE"

;
; pal_bright(0);
;
	.dbg	line, "scripts/gamePhase.h", 350
	lda     #$00
	jsr     _pal_bright
;
; initGameMap();
;
	.dbg	line, "scripts/gamePhase.h", 353
	jsr     _initGameMap
;
; wait = START_DELAY;
;
	.dbg	line, "scripts/gamePhase.h", 356
	lda     #$0F
	sta     _wait
;
; ppu_on_all();
;
	.dbg	line, "scripts/gamePhase.h", 359
	jsr     _ppu_on_all
;
; if (gameLevel > 0)
;
	.dbg	line, "scripts/gamePhase.h", 362
	lda     _gameLevel
	beq     L0F5F
;
; updateHUD();
;
	.dbg	line, "scripts/gamePhase.h", 364
	jsr     _updateHUD
;
; levelDone = FALSE;
;
	.dbg	line, "scripts/gamePhase.h", 367
	lda     #$00
L0F5F:	sta     _levelDone
;
; frameCounter = 0;
;
	.dbg	line, "scripts/gamePhase.h", 368
	sta     _frameCounter
;
; oam_meta_spr(player_x >> FP_BITS,
;
	.dbg	line, "scripts/gamePhase.h", 373
L0C4A:	jsr     decsp3
	lda     _player_x
	ldx     _player_x+1
	jsr     shrax4
	ldy     #$02
	sta     (sp),y
;
; player_y >> FP_BITS,
;
	.dbg	line, "scripts/gamePhase.h", 374
	lda     _player_y
	ldx     _player_y+1
	jsr     shrax4
	dey
	sta     (sp),y
;
; 0,
;
	.dbg	line, "scripts/gamePhase.h", 375
	lda     #$00
	dey
	sta     (sp),y
;
; playerMetasprite);
;
	.dbg	line, "scripts/gamePhase.h", 376
	lda     #<(_playerMetasprite)
	ldx     #>(_playerMetasprite)
	jsr     _oam_meta_spr
;
; oam_meta_spr(enemy_tileX << TILE_SIZE_BIT,
;
	.dbg	line, "scripts/gamePhase.h", 377
	jsr     decsp3
	lda     _enemy_tileX
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
;
; enemy_tileY << TILE_SIZE_BIT,
;
	.dbg	line, "scripts/gamePhase.h", 378
	lda     _enemy_tileY
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
;
; 16,
;
	.dbg	line, "scripts/gamePhase.h", 379
	lda     #$10
	dey
	sta     (sp),y
;
; enemyMetasprite);
;
	.dbg	line, "scripts/gamePhase.h", 380
	lda     #<(_enemyMetasprite)
	ldx     #>(_enemyMetasprite)
	jsr     _oam_meta_spr
;
; if (levelDone) break;
;
	.dbg	line, "scripts/gamePhase.h", 383
	lda     _levelDone
	jne     L0C4B
;
; ppu_wait_frame();
;
	.dbg	line, "scripts/gamePhase.h", 387
	jsr     _ppu_wait_frame
;
; ++frameCounter;
;
	.dbg	line, "scripts/gamePhase.h", 389
	inc     _frameCounter
;
; if (!(frameCounter&3))
;
	.dbg	line, "scripts/gamePhase.h", 392
	lda     _frameCounter
	and     #$03
	bne     L0C5C
;
; if (!gamePaused && bright < 4) ++bright;
;
	.dbg	line, "scripts/gamePhase.h", 394
	lda     _gamePaused
	bne     L0C5F
	lda     _bright
	cmp     #$04
	bcs     L0C5F
	inc     _bright
;
; if ( gamePaused && bright > 2) --bright;
;
	.dbg	line, "scripts/gamePhase.h", 395
L0C5F:	lda     _gamePaused
	beq     L0C64
	lda     _bright
	cmp     #$03
	bcc     L0C64
	dec     _bright
;
; pal_bright(bright);
;
	.dbg	line, "scripts/gamePhase.h", 396
L0C64:	lda     _bright
	jsr     _pal_bright
;
; input = pad_trigger(0);
;
	.dbg	line, "scripts/gamePhase.h", 400
L0C5C:	lda     #$00
	jsr     _pad_trigger
	sta     _input
;
; if (input&PAD_START)
;
	.dbg	line, "scripts/gamePhase.h", 403
	and     #$08
	beq     L0C6E
;
; gamePaused ^= TRUE;
;
	.dbg	line, "scripts/gamePhase.h", 405
	lda     _gamePaused
	eor     #$01
	sta     _gamePaused
;
; music_pause(gamePaused);
;
	.dbg	line, "scripts/gamePhase.h", 406
	jsr     _music_pause
;
; if (gamePaused) continue;
;
	.dbg	line, "scripts/gamePhase.h", 410
L0C6E:	lda     _gamePaused
	jne     L0C4A
;
; bank_bg((frameCounter >> 4)&1);
;
	.dbg	line, "scripts/gamePhase.h", 413
	lda     _frameCounter
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     _bank_bg
;
; bank_spr((frameCounter >> 3)&1); // Faster switching for sprites
;
	.dbg	line, "scripts/gamePhase.h", 414
	lda     _frameCounter
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     _bank_spr
;
; if (wait)
;
	.dbg	line, "scripts/gamePhase.h", 416
	lda     _wait
	beq     L0C7F
;
; --wait;
;
	.dbg	line, "scripts/gamePhase.h", 418
	dec     _wait
;
; if (!wait)
;
	.dbg	line, "scripts/gamePhase.h", 419
	bne     L0C7F
;
; sfx_play(SFX_RESPAWN1, 1);
;
	.dbg	line, "scripts/gamePhase.h", 422
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; music_play(MUSIC_GAME);
;
	.dbg	line, "scripts/gamePhase.h", 424
	lda     #$01
	jsr     _music_play
;
; if (player_moveCounter != 0)
;
	.dbg	line, "scripts/gamePhase.h", 429
L0C7F:	lda     _player_moveCounter
	ora     _player_moveCounter+1
	jeq     L0F6D
;
; switch (player_dir)
;
	.dbg	line, "scripts/gamePhase.h", 432
	lda     _player_dir
;
; }
;
	.dbg	line, "scripts/gamePhase.h", 438
	cmp     #$10
	beq     L0C99
	cmp     #$20
	beq     L0C95
	cmp     #$40
	beq     L0C91
	cmp     #$80
	bne     L0C8B
;
; case DIR_RIGHT: player_x += player_speed; break;
;
	.dbg	line, "scripts/gamePhase.h", 434
	lda     _player_speed
	clc
	adc     _player_x
	sta     _player_x
	lda     _player_speed+1
	adc     _player_x+1
	sta     _player_x+1
	jmp     L0C8B
;
; case DIR_LEFT: player_x -= player_speed; break;
;
	.dbg	line, "scripts/gamePhase.h", 435
L0C91:	lda     _player_speed
	eor     #$FF
	sec
	adc     _player_x
	sta     _player_x
	lda     _player_speed+1
	eor     #$FF
	adc     _player_x+1
	sta     _player_x+1
	jmp     L0C8B
;
; case DIR_DOWN: player_y += player_speed; break;
;
	.dbg	line, "scripts/gamePhase.h", 436
L0C95:	lda     _player_speed
	clc
	adc     _player_y
	sta     _player_y
	lda     _player_speed+1
	jmp     L0F78
;
; case DIR_UP: player_y -= player_speed; break;
;
	.dbg	line, "scripts/gamePhase.h", 437
L0C99:	lda     _player_speed
	eor     #$FF
	sec
	adc     _player_y
	sta     _player_y
	lda     _player_speed+1
	eor     #$FF
L0F78:	adc     _player_y+1
	sta     _player_y+1
;
; player_moveCounter -= player_speed;
;
	.dbg	line, "scripts/gamePhase.h", 440
L0C8B:	lda     _player_speed
	eor     #$FF
	sec
	adc     _player_moveCounter
	sta     _player_moveCounter
	lda     _player_speed+1
	eor     #$FF
	adc     _player_moveCounter+1
	sta     _player_moveCounter+1
;
; if (player_moveCounter <= 0)
;
	.dbg	line, "scripts/gamePhase.h", 443
	lda     _player_moveCounter
	cmp     #$01
	lda     _player_moveCounter+1
	sbc     #$00
	bvc     L0CA0
	eor     #$80
L0CA0:	jpl     L0F6B
;
; player_moveCounter = 0;
;
	.dbg	line, "scripts/gamePhase.h", 445
	lda     #$00
	sta     _player_moveCounter
	sta     _player_moveCounter+1
;
; player_x = player_nextTileX << TILE_PLUS_FP_BITS;
;
	.dbg	line, "scripts/gamePhase.h", 455
	lda     _player_nextTileX
	sta     _player_x+1
	lda     #$00
	sta     _player_x
;
; player_y = player_nextTileY << TILE_PLUS_FP_BITS;
;
	.dbg	line, "scripts/gamePhase.h", 456
	lda     _player_nextTileY
	sta     _player_y+1
	lda     #$00
	sta     _player_y
;
; if (player_x == exit_tileX << TILE_PLUS_FP_BITS &&
;
	.dbg	line, "scripts/gamePhase.h", 459
	lda     _player_x
	ldx     _player_x+1
	jsr     pushax
	ldx     _exit_tileX
	lda     #$00
	jsr     tosicmp
	bne     L0F75
;
; player_y == exit_tileY << TILE_PLUS_FP_BITS)
;
	.dbg	line, "scripts/gamePhase.h", 460
	lda     _player_y
	ldx     _player_y+1
	jsr     pushax
	ldx     _exit_tileY
	lda     #$00
	jsr     tosicmp
	bne     L0F75
;
; gameClear = TRUE;
;
	.dbg	line, "scripts/gamePhase.h", 462
	lda     #$01
	sta     _gameClear
;
; levelDone = TRUE;
;
	.dbg	line, "scripts/gamePhase.h", 463
	sta     _levelDone
;
; i16 = MAP_ADR(player_nextTileX, player_nextTileY);
;
	.dbg	line, "scripts/gamePhase.h", 466
L0F75:	ldx     #$00
	lda     _player_nextTileY
	sec
	sbc     #$02
	bcs     L0CB9
	dex
L0CB9:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _player_nextTileX
	ora     ptr1
	sta     _i16
	lda     ptr1+1
	sta     _i16+1
;
; switch (map[i16])
;
	.dbg	line, "scripts/gamePhase.h", 467
	lda     #<(_map)
	sta     ptr1
	lda     #>(_map)
	clc
	adc     _i16+1
	sta     ptr1+1
	ldy     _i16
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	.dbg	line, "scripts/gamePhase.h", 518
	beq     L0F67
	cmp     #$45
	beq     L0CC6
	jmp     L0F68
;
; gameClear = FALSE;
;
	.dbg	line, "scripts/gamePhase.h", 471
L0F67:	sta     _gameClear
;
; levelDone = TRUE;
;
	.dbg	line, "scripts/gamePhase.h", 472
	lda     #$01
	sta     _levelDone
;
; break;
;
	.dbg	line, "scripts/gamePhase.h", 473
	jmp     L0F68
;
; map[i16] = TILE_EMPTY;
;
	.dbg	line, "scripts/gamePhase.h", 478
L0CC6:	lda     #<(_map)
	clc
	adc     _i16
	sta     ptr1
	lda     #>(_map)
	adc     _i16+1
	sta     ptr1+1
	lda     #$44
	ldy     #$00
	sta     (ptr1),y
;
; sfx_play(SFX_ITEM, 1);
;
	.dbg	line, "scripts/gamePhase.h", 480
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; ++levelItemsCollected;
;
	.dbg	line, "scripts/gamePhase.h", 482
	inc     _levelItemsCollected
;
; percentCollected = levelItemsCollected*100/levelItemsCount;
;
	.dbg	line, "scripts/gamePhase.h", 485
	lda     _levelItemsCollected
	jsr     pusha0
	lda     #$64
	jsr     tosumula0
	jsr     pushax
	lda     _levelItemsCount
	jsr     tosudiva0
	sta     _percentCollected
;
; if (percentCollected >= CLEAR_PERC_REQT)
;
	.dbg	line, "scripts/gamePhase.h", 488
	cmp     #$32
	bcc     L0CD0
;
; enemy_tileX = 255; // Lower right screen corner
;
	.dbg	line, "scripts/gamePhase.h", 490
	lda     #$FF
	sta     _enemy_tileX
;
; enemy_tileY = 255;
;
	.dbg	line, "scripts/gamePhase.h", 491
	sta     _enemy_tileY
;
; incrementTotalItemsCollected();
;
	.dbg	line, "scripts/gamePhase.h", 495
L0CD0:	jsr     _incrementTotalItemsCollected
;
; i16 = NAM_ADR(player_nextTileX, player_nextTileY);
;
	.dbg	line, "scripts/gamePhase.h", 498
	ldx     #$00
	lda     _player_nextTileY
	sec
	sbc     #$02
	bcs     L0CE3
	dex
L0CE3:	jsr     shlax4
	jsr     shlax2
	clc
	adc     #$80
	sta     ptr1
	txa
	adc     #$20
	sta     ptr1+1
	ldx     #$00
	lda     _player_nextTileX
	asl     a
	bcc     L0F58
	inx
L0F58:	ora     ptr1
	sta     _i16
	txa
	ora     ptr1+1
	sta     _i16+1
;
; updateList[0] = i16 >> 8;  // MSB
;
	.dbg	line, "scripts/gamePhase.h", 502
	sta     _updateList
;
; updateList[1] = i16 & 0xff;  // LSB
;
	.dbg	line, "scripts/gamePhase.h", 503
	lda     _i16
	sta     _updateList+1
;
; updateList[3] = updateList[0];
;
	.dbg	line, "scripts/gamePhase.h", 505
	lda     _updateList
	sta     _updateList+3
;
; updateList[4] = updateList[1] + 1; // Element next to upper left
;
	.dbg	line, "scripts/gamePhase.h", 506
	lda     _updateList+1
	clc
	adc     #$01
	sta     _updateList+4
;
; i16 += 32;
;
	.dbg	line, "scripts/gamePhase.h", 507
	lda     #$20
	clc
	adc     _i16
	sta     _i16
	bcc     L0CF7
	inc     _i16+1
;
; updateList[6] = i16 >> 8;
;
	.dbg	line, "scripts/gamePhase.h", 509
L0CF7:	lda     _i16+1
	sta     _updateList+6
;
; updateList[7] = i16 & 0xff;
;
	.dbg	line, "scripts/gamePhase.h", 510
	lda     _i16
	sta     _updateList+7
;
; updateList[9] = updateList[6];
;
	.dbg	line, "scripts/gamePhase.h", 512
	lda     _updateList+6
	sta     _updateList+9
;
; updateList[10] = updateList[7] + 1; // Element next to lower left
;
	.dbg	line, "scripts/gamePhase.h", 513
	lda     _updateList+7
	clc
	adc     #$01
	sta     _updateList+10
;
; updateHUD();
;
	.dbg	line, "scripts/gamePhase.h", 516
	jsr     _updateHUD
;
; i16 = MAP_ADR(player_prevTileX, player_prevTileY);
;
	.dbg	line, "scripts/gamePhase.h", 521
	ldx     #$00
L0F68:	lda     _player_prevTileY
	sec
	sbc     #$02
	bcs     L0D0E
	dex
L0D0E:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _player_prevTileX
	ora     ptr1
	sta     _i16
	lda     ptr1+1
	sta     _i16+1
;
; map[i16] = TILE_HOLE;
;
	.dbg	line, "scripts/gamePhase.h", 522
	lda     #<(_map)
	clc
	adc     _i16
	sta     ptr1
	lda     #>(_map)
	adc     _i16+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; i16 = NAM_ADR(player_prevTileX, player_prevTileY);
;
	.dbg	line, "scripts/gamePhase.h", 525
	tax
	lda     _player_prevTileY
	sec
	sbc     #$02
	bcs     L0D1F
	dex
L0D1F:	jsr     shlax4
	jsr     shlax2
	clc
	adc     #$80
	sta     ptr1
	txa
	adc     #$20
	sta     ptr1+1
	ldx     #$00
	lda     _player_prevTileX
	asl     a
	bcc     L0F59
	inx
L0F59:	ora     ptr1
	sta     _i16
	txa
	ora     ptr1+1
	sta     _i16+1
;
; updateList[12] = i16 >> 8;    // MSB
;
	.dbg	line, "scripts/gamePhase.h", 528
	sta     _updateList+12
;
; updateList[13] = i16 & 0xff;   // LSB
;
	.dbg	line, "scripts/gamePhase.h", 529
	lda     _i16
	sta     _updateList+13
;
; updateList[15] = updateList[12];
;
	.dbg	line, "scripts/gamePhase.h", 531
	lda     _updateList+12
	sta     _updateList+15
;
; updateList[16] = updateList[13] + 1; // Element next to upper left
;
	.dbg	line, "scripts/gamePhase.h", 532
	lda     _updateList+13
	clc
	adc     #$01
	sta     _updateList+16
;
; i16 += 32;
;
	.dbg	line, "scripts/gamePhase.h", 533
	lda     #$20
	clc
	adc     _i16
	sta     _i16
	bcc     L0D33
	inc     _i16+1
;
; updateList[18] = i16 >> 8;
;
	.dbg	line, "scripts/gamePhase.h", 535
L0D33:	lda     _i16+1
	sta     _updateList+18
;
; updateList[19] = i16 & 0xff;
;
	.dbg	line, "scripts/gamePhase.h", 536
	lda     _i16
	sta     _updateList+19
;
; updateList[21] = updateList[18];
;
	.dbg	line, "scripts/gamePhase.h", 538
	lda     _updateList+18
	sta     _updateList+21
;
; updateList[22] = updateList[19] + 1; // Element next to lower left
;
	.dbg	line, "scripts/gamePhase.h", 539
	lda     _updateList+19
	clc
	adc     #$01
	sta     _updateList+22
;
; player_prevTileX = player_nextTileX;
;
	.dbg	line, "scripts/gamePhase.h", 542
	lda     _player_nextTileX
	sta     _player_prevTileX
;
; player_prevTileY = player_nextTileY;
;
	.dbg	line, "scripts/gamePhase.h", 543
	lda     _player_nextTileY
	sta     _player_prevTileY
;
; if (updateList[12] == updateList[0] && updateList[13] == updateList[1])
;
	.dbg	line, "scripts/gamePhase.h", 547
	lda     _updateList
	cmp     _updateList+12
	bne     L0D47
	lda     _updateList+1
	cmp     _updateList+13
	bne     L0D47
;
; updateList[0] = updateList[3] = updateList[6] = updateList[9] = 0x28;
;
	.dbg	line, "scripts/gamePhase.h", 549
	lda     #$28
	sta     _updateList+9
	sta     _updateList+6
	sta     _updateList+3
	sta     _updateList
;
; updateList[1] = updateList[4] = updateList[7] = updateList[10] = 0x00;
;
	.dbg	line, "scripts/gamePhase.h", 550
	tya
	sta     _updateList+10
	sta     _updateList+7
	sta     _updateList+4
	sta     _updateList+1
;
; checkPlayerMove(player_nextDir);
;
	.dbg	line, "scripts/gamePhase.h", 554
L0D47:	lda     _player_nextDir
	jsr     _checkPlayerMove
;
; if (percentCollected < CLEAR_PERC_REQT && 
;
	.dbg	line, "scripts/gamePhase.h", 558
L0F6B:	lda     _percentCollected
	cmp     #$32
	jcs     L0F76
;
; !(((player_x>>TILE_SIZE_BIT)+4)>=((enemy_tileX<<TILE_SIZE_BIT)+12) ||
;
	.dbg	line, "scripts/gamePhase.h", 559
	lda     _player_x
	ldx     _player_x+1
	jsr     shrax4
	clc
	adc     #$04
	bcc     L0D69
	inx
L0D69:	jsr     pushax
	ldx     #$00
	lda     _enemy_tileX
	jsr     aslax4
	clc
	adc     #$0C
	bcc     L0D6C
	inx
L0D6C:	jsr     tosicmp
	bcs     L0D66
;
; ((player_x>>TILE_SIZE_BIT)+12)<((enemy_tileX<<TILE_SIZE_BIT)+4) ||
;
	.dbg	line, "scripts/gamePhase.h", 560
	lda     _player_x
	ldx     _player_x+1
	jsr     shrax4
	clc
	adc     #$0C
	bcc     L0D6F
	inx
L0D6F:	jsr     pushax
	ldx     #$00
	lda     _enemy_tileX
	jsr     aslax4
	clc
	adc     #$04
	bcc     L0D72
	inx
L0D72:	jsr     tosicmp
	bcc     L0D66
;
; ((player_y>>TILE_SIZE_BIT)+4)>=((enemy_tileY<<TILE_SIZE_BIT)+12) ||
;
	.dbg	line, "scripts/gamePhase.h", 561
	lda     _player_y
	ldx     _player_y+1
	jsr     shrax4
	clc
	adc     #$04
	bcc     L0D75
	inx
L0D75:	jsr     pushax
	ldx     #$00
	lda     _enemy_tileY
	jsr     aslax4
	clc
	adc     #$0C
	bcc     L0D78
	inx
L0D78:	jsr     tosicmp
	bcs     L0D66
;
; ((player_y>>TILE_SIZE_BIT)+12)<((enemy_tileY<<TILE_SIZE_BIT)+4)))
;
	.dbg	line, "scripts/gamePhase.h", 562
	lda     _player_y
	ldx     _player_y+1
	jsr     shrax4
	clc
	adc     #$0C
	bcc     L0D7B
	inx
L0D7B:	jsr     pushax
	ldx     #$00
	lda     _enemy_tileY
	jsr     aslax4
	clc
	adc     #$04
	bcc     L0D7E
	inx
L0D7E:	jsr     tosicmp
	bcc     L0D66
	lda     #$00
	jmp     L0D7F
L0D66:	lda     #$01
L0D7F:	jsr     bnega
	beq     L0F76
;
; gameClear = FALSE;
;
	.dbg	line, "scripts/gamePhase.h", 564
	lda     #$00
	sta     _gameClear
;
; levelDone = TRUE;
;
	.dbg	line, "scripts/gamePhase.h", 565
	lda     #$01
	sta     _levelDone
;
; j = pad_state(0);
;
	.dbg	line, "scripts/gamePhase.h", 570
L0F76:	lda     #$00
L0F6D:	jsr     _pad_state
	sta     _j
;
; if (player_moveCounter == 0)
;
	.dbg	line, "scripts/gamePhase.h", 573
	lda     _player_moveCounter
	ora     _player_moveCounter+1
	bne     L0D88
;
; if (j&PAD_LEFT)  checkPlayerMove(DIR_LEFT);
;
	.dbg	line, "scripts/gamePhase.h", 575
	lda     _j
	and     #$40
	beq     L0F6E
	lda     #$40
	jsr     _checkPlayerMove
;
; if (j&PAD_RIGHT) checkPlayerMove(DIR_RIGHT);
;
	.dbg	line, "scripts/gamePhase.h", 576
L0F6E:	lda     _j
	and     #$80
	beq     L0F6F
	lda     #$80
	jsr     _checkPlayerMove
;
; if (j&PAD_UP)  checkPlayerMove(DIR_UP);
;
	.dbg	line, "scripts/gamePhase.h", 577
L0F6F:	lda     _j
	and     #$10
	beq     L0F70
	lda     #$10
	jsr     _checkPlayerMove
;
; if (j&PAD_DOWN)  checkPlayerMove(DIR_DOWN);
;
	.dbg	line, "scripts/gamePhase.h", 578
L0F70:	lda     _j
	and     #$20
	jeq     L0C4A
	lda     #$20
	jsr     _checkPlayerMove
;
; else
;
	.dbg	line, "scripts/gamePhase.h", 580
	jmp     L0C4A
;
; if (j&PAD_LEFT)  player_nextDir = DIR_LEFT;
;
	.dbg	line, "scripts/gamePhase.h", 582
L0D88:	lda     _j
	and     #$40
	beq     L0F71
	lda     #$40
	sta     _player_nextDir
;
; if (j&PAD_RIGHT) player_nextDir = DIR_RIGHT;
;
	.dbg	line, "scripts/gamePhase.h", 583
L0F71:	lda     _j
	and     #$80
	beq     L0F72
	lda     #$80
	sta     _player_nextDir
;
; if (j&PAD_UP)  player_nextDir = DIR_UP;
;
	.dbg	line, "scripts/gamePhase.h", 584
L0F72:	lda     _j
	and     #$10
	beq     L0F73
	lda     #$10
	sta     _player_nextDir
;
; if (j&PAD_DOWN)  player_nextDir = DIR_DOWN;
;
	.dbg	line, "scripts/gamePhase.h", 585
L0F73:	lda     _j
	and     #$20
	jeq     L0C4A
	lda     #$20
	sta     _player_nextDir
;
; while (1)
;
	.dbg	line, "scripts/gamePhase.h", 370
	jmp     L0C4A
;
; if (gameClear)
;
	.dbg	line, "scripts/gamePhase.h", 590
L0C4B:	lda     _gameClear
	beq     L0DAC
;
; music_play(MUSIC_CLEAR);
;
	.dbg	line, "scripts/gamePhase.h", 592
	lda     #$02
	jsr     _music_play
;
; ++gameLevel;
;
	.dbg	line, "scripts/gamePhase.h", 593
	inc     _gameLevel
;
; if (gameLevel == LEVEL_END)
;
	.dbg	line, "scripts/gamePhase.h", 594
	lda     _gameLevel
	cmp     #$03
	bne     L0DB5
;
; else
;
	.dbg	line, "scripts/gamePhase.h", 599
	jmp     L0F77
;
; music_play(MUSIC_LOSE);
;
	.dbg	line, "scripts/gamePhase.h", 601
L0DAC:	lda     #$05
	jsr     _music_play
;
; gameDone = TRUE;
;
	.dbg	line, "scripts/gamePhase.h", 602
L0F77:	lda     #$01
	sta     _gameDone
;
; delay(END_DELAY);
;
	.dbg	line, "scripts/gamePhase.h", 606
L0DB5:	lda     #$50
	jsr     _delay
;
; pal_fade_to(0);
;
	.dbg	line, "scripts/gamePhase.h", 609
	ldx     #$00
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ resultPhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resultPhase: near

	.dbg	func, "resultPhase", "00", extern, "_resultPhase"

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "scripts/resultPhase.h", 28
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; if (gameClear)
;
	.dbg	line, "scripts/resultPhase.h", 29
	lda     _gameClear
	jeq     L0EB8
;
; vram_unrle(result_success);
;
	.dbg	line, "scripts/resultPhase.h", 31
	lda     #<(_result_success)
	ldx     #>(_result_success)
	jsr     _vram_unrle
;
; if (totalItemsCollected5 > 0)
;
	.dbg	line, "scripts/resultPhase.h", 34
	lda     _totalItemsCollected5
	beq     L0F79
;
; vram_adr(SCORE_TEXT_ADR);
;
	.dbg	line, "scripts/resultPhase.h", 36
	ldx     #$22
	lda     #$4D
	jsr     _vram_adr
;
; vram_put(0x10 + totalItemsCollected5);
;
	.dbg	line, "scripts/resultPhase.h", 37
	lda     _totalItemsCollected5
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected4);
;
	.dbg	line, "scripts/resultPhase.h", 38
	lda     _totalItemsCollected4
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected3);
;
	.dbg	line, "scripts/resultPhase.h", 39
	lda     _totalItemsCollected3
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected2);
;
	.dbg	line, "scripts/resultPhase.h", 40
	lda     _totalItemsCollected2
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected1);
;
	.dbg	line, "scripts/resultPhase.h", 41
	lda     _totalItemsCollected1
	clc
	adc     #$10
	jsr     _vram_put
;
; else if (totalItemsCollected4 > 0)
;
	.dbg	line, "scripts/resultPhase.h", 43
	jmp     L0F1D
L0F79:	lda     _totalItemsCollected4
	beq     L0F7A
;
; vram_adr(SCORE_TEXT_ADR + 1);
;
	.dbg	line, "scripts/resultPhase.h", 45
	ldx     #$22
	lda     #$4E
	jsr     _vram_adr
;
; vram_put(0x10 + totalItemsCollected4);
;
	.dbg	line, "scripts/resultPhase.h", 46
	lda     _totalItemsCollected4
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected3);
;
	.dbg	line, "scripts/resultPhase.h", 47
	lda     _totalItemsCollected3
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected2);
;
	.dbg	line, "scripts/resultPhase.h", 48
	lda     _totalItemsCollected2
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected1);
;
	.dbg	line, "scripts/resultPhase.h", 49
	lda     _totalItemsCollected1
	clc
	adc     #$10
	jsr     _vram_put
;
; else if (totalItemsCollected3 > 0)
;
	.dbg	line, "scripts/resultPhase.h", 51
	jmp     L0F1D
L0F7A:	lda     _totalItemsCollected3
	beq     L0F7B
;
; vram_adr(SCORE_TEXT_ADR + 1);
;
	.dbg	line, "scripts/resultPhase.h", 53
	ldx     #$22
	lda     #$4E
	jsr     _vram_adr
;
; vram_put(0x10 + totalItemsCollected3);
;
	.dbg	line, "scripts/resultPhase.h", 54
	lda     _totalItemsCollected3
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected2);
;
	.dbg	line, "scripts/resultPhase.h", 55
	lda     _totalItemsCollected2
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected1);
;
	.dbg	line, "scripts/resultPhase.h", 56
	lda     _totalItemsCollected1
	clc
	adc     #$10
	jsr     _vram_put
;
; else if (totalItemsCollected2 > 0)
;
	.dbg	line, "scripts/resultPhase.h", 58
	jmp     L0F1D
L0F7B:	lda     _totalItemsCollected2
	beq     L0F01
;
; vram_adr(SCORE_TEXT_ADR + 2);
;
	.dbg	line, "scripts/resultPhase.h", 60
	ldx     #$22
	lda     #$4F
	jsr     _vram_adr
;
; vram_put(0x10 + totalItemsCollected2);
;
	.dbg	line, "scripts/resultPhase.h", 61
	lda     _totalItemsCollected2
	clc
	adc     #$10
	jsr     _vram_put
;
; vram_put(0x10 + totalItemsCollected1);
;
	.dbg	line, "scripts/resultPhase.h", 62
	lda     _totalItemsCollected1
	clc
	adc     #$10
	jsr     _vram_put
;
; else
;
	.dbg	line, "scripts/resultPhase.h", 64
	jmp     L0F1D
;
; vram_adr(SCORE_TEXT_ADR + 2);
;
	.dbg	line, "scripts/resultPhase.h", 66
L0F01:	ldx     #$22
	lda     #$4F
	jsr     _vram_adr
;
; vram_put(0x10 + totalItemsCollected1);
;
	.dbg	line, "scripts/resultPhase.h", 67
	lda     _totalItemsCollected1
	clc
	adc     #$10
	jsr     _vram_put
;
; else
;
	.dbg	line, "scripts/resultPhase.h", 70
	jmp     L0F1D
;
; vram_unrle(result_failure);
;
	.dbg	line, "scripts/resultPhase.h", 72
L0EB8:	lda     #<(_result_failure)
	ldx     #>(_result_failure)
	jsr     _vram_unrle
;
; ppu_on_bg();
;
	.dbg	line, "scripts/resultPhase.h", 76
L0F1D:	jsr     _ppu_on_bg
;
; pal_fade_to(4);
;
	.dbg	line, "scripts/resultPhase.h", 79
	ldx     #$00
	lda     #$04
	jsr     _pal_fade_to
;
; ppu_wait_frame();
;
	.dbg	line, "scripts/resultPhase.h", 83
L0F23:	jsr     _ppu_wait_frame
;
; if (pad_trigger(0)&PAD_START) break;
;
	.dbg	line, "scripts/resultPhase.h", 86
	lda     #$00
	jsr     _pad_trigger
	ldx     #$00
	and     #$08
	beq     L0F23
;
; pal_fade_to(0);
;
	.dbg	line, "scripts/resultPhase.h", 89
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; titlePhase();
;
	.dbg	line, "scripts\main.c", 101
L0F2E:	jsr     _titlePhase
;
; gameLevel = LEVEL_START;
;
	.dbg	line, "scripts\main.c", 103
	lda     #$00
	sta     _gameLevel
;
; gameDone = FALSE;
;
	.dbg	line, "scripts\main.c", 104
	sta     _gameDone
;
; while (!gameDone)
;
	.dbg	line, "scripts\main.c", 106
	jmp     L0F39
;
; gamePhase();
;
	.dbg	line, "scripts\main.c", 108
L0F37:	jsr     _gamePhase
;
; while (!gameDone)
;
	.dbg	line, "scripts\main.c", 106
L0F39:	lda     _gameDone
	beq     L0F37
;
; resultPhase();
;
	.dbg	line, "scripts\main.c", 111
	jsr     _resultPhase
;
; while (1) // Infinite loop
;
	.dbg	line, "scripts\main.c", 99
	jmp     L0F2E
	.dbg	line

.endproc

