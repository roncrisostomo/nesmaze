;
; File generated by cc65 v 2.16 - Git 820b4db
;
	.fopt		compiler,"cc65 v 2.16 - Git 820b4db"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "main.c", 2418, 1511018267
	.dbg		file, "neslib.h", 8325, 1510735219
	.dbg		file, "soundsAndMusic.h", 769, 1510971067
	.dbg		file, "titlePhase.h", 2047, 1510918883
	.dbg		file, "title_nam.h", 1338, 1511018643
	.dbg		file, "gamePhase.h", 16818, 1511018675
	.dbg		file, "level_test.h", 3436, 1510984341
	.dbg		file, "level_test2.h", 4369, 1511014731
	.dbg		file, "resultPhase.h", 1111, 1510970689
	.dbg		file, "result_success.h", 627, 1510970569
	.dbg		file, "result_failure.h", 554, 1510970384
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_col", "00", extern, "_pal_col"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_frame", "00", extern, "_ppu_wait_frame"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "ppu_on_bg", "00", extern, "_ppu_on_bg"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "music_play", "00", extern, "_music_play"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "music_pause", "00", extern, "_music_pause"
	.dbg		sym, "sfx_play", "00", extern, "_sfx_play"
	.dbg		sym, "pad_trigger", "00", extern, "_pad_trigger"
	.dbg		sym, "pad_state", "00", extern, "_pad_state"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "bank_bg", "00", extern, "_bank_bg"
	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_put", "00", extern, "_vram_put"
	.dbg		sym, "vram_read", "00", extern, "_vram_read"
	.dbg		sym, "vram_write", "00", extern, "_vram_write"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "delay", "00", extern, "_delay"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_on_bg
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_trigger
	.import		_pad_state
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_read
	.import		_vram_write
	.import		_vram_unrle
	.import		_memcpy
	.import		_delay
	.export		_pal_fade_to
	.export		_title_nam
	.export		_palTitle
	.export		_titlePhase
	.export		_level_test
	.export		_level_test2
	.export		_pal_level_test
	.export		_palGameSpr
	.export		_hudLabels
	.export		_playerMetasprite
	.export		_updateListData
	.export		_incrementTotalItemsCollected
	.export		_updateHUD
	.export		_checkPlayerMove
	.export		_initGameMap
	.export		_gamePhase
	.export		_result_success
	.export		_result_failure
	.export		_resultPhase
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"

.segment	"RODATA"

_title_nam:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$C4
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$B3
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$42
	.byte	$43
	.byte	$B4
	.byte	$40
	.byte	$41
	.byte	$B4
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$B1
	.byte	$B1
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$40
	.byte	$41
	.byte	$B3
	.byte	$42
	.byte	$43
	.byte	$B4
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$0C
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$B1
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$42
	.byte	$43
	.byte	$B1
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$CF
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$02
	.byte	$35
	.byte	$A6
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$5D
	.byte	$12
	.byte	$10
	.byte	$11
	.byte	$17
	.byte	$00
	.byte	$32
	.byte	$2F
	.byte	$2E
	.byte	$00
	.byte	$02
	.byte	$94
	.byte	$FF
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$02
	.byte	$02
	.byte	$F3
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$00
_palTitle:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_level_test:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$47
	.byte	$D4
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$2C
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$09
	.byte	$25
	.byte	$38
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$09
	.byte	$29
	.byte	$34
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0D
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0D
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$0D
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$0D
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$33
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$09
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$09
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$BF
	.byte	$AF
	.byte	$01
	.byte	$05
	.byte	$EF
	.byte	$BB
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$EE
	.byte	$BB
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$EE
	.byte	$BB
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$EE
	.byte	$BB
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$EE
	.byte	$BB
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$EE
	.byte	$0F
	.byte	$01
	.byte	$06
	.byte	$0F
	.byte	$01
	.byte	$00
_level_test2:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$47
	.byte	$D4
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$2C
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$25
	.byte	$38
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$29
	.byte	$34
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$0F
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$33
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$47
	.byte	$48
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$BF
	.byte	$AF
	.byte	$01
	.byte	$04
	.byte	$BF
	.byte	$EF
	.byte	$BB
	.byte	$EA
	.byte	$FA
	.byte	$FA
	.byte	$AA
	.byte	$AA
	.byte	$BB
	.byte	$EE
	.byte	$BB
	.byte	$AA
	.byte	$AA
	.byte	$AE
	.byte	$EB
	.byte	$BE
	.byte	$BB
	.byte	$EE
	.byte	$BB
	.byte	$EE
	.byte	$EA
	.byte	$BA
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$EE
	.byte	$BB
	.byte	$EE
	.byte	$AB
	.byte	$AE
	.byte	$FB
	.byte	$FA
	.byte	$BA
	.byte	$EE
	.byte	$BB
	.byte	$EE
	.byte	$AA
	.byte	$01
	.byte	$04
	.byte	$EE
	.byte	$0F
	.byte	$01
	.byte	$06
	.byte	$0F
	.byte	$01
	.byte	$00
_pal_level_test:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_palGameSpr:
	.byte	$0F
	.byte	$0F
	.byte	$29
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$26
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$24
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$21
	.byte	$30
_hudLabels:
	.byte	$2D
	.byte	$2F
	.byte	$2E
	.byte	$25
	.byte	$39
	.byte	$33
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$23
	.byte	$2C
	.byte	$25
	.byte	$21
	.byte	$32
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$05
_playerMetasprite:
	.byte	$00
	.byte	$FF
	.byte	$49
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$4B
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$4C
	.byte	$00
	.byte	$80
_updateListData:
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$4B
	.byte	$10
	.byte	$20
	.byte	$4C
	.byte	$10
	.byte	$20
	.byte	$4D
	.byte	$10
	.byte	$20
	.byte	$4E
	.byte	$10
	.byte	$20
	.byte	$4F
	.byte	$10
	.byte	$20
	.byte	$57
	.byte	$10
	.byte	$20
	.byte	$58
	.byte	$10
	.byte	$20
	.byte	$59
	.byte	$10
	.byte	$FF
_result_success:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$EA
	.byte	$C2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$D4
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$AD
	.byte	$37
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$37
	.byte	$B5
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$34
	.byte	$02
	.byte	$02
	.byte	$B2
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$B5
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$D3
	.byte	$37
	.byte	$B5
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$B5
	.byte	$00
	.byte	$01
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$D3
	.byte	$37
	.byte	$D3
	.byte	$37
	.byte	$D3
	.byte	$D3
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$B5
	.byte	$01
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$B0
	.byte	$B5
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$B5
	.byte	$B5
	.byte	$00
	.byte	$B5
	.byte	$00
	.byte	$02
	.byte	$24
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$1F
	.byte	$00
	.byte	$02
	.byte	$00
_result_failure:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$88
	.byte	$21
	.byte	$21
	.byte	$D3
	.byte	$D3
	.byte	$C2
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$D4
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$D3
	.byte	$37
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$21
	.byte	$01
	.byte	$03
	.byte	$D3
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$B5
	.byte	$37
	.byte	$B5
	.byte	$37
	.byte	$B5
	.byte	$37
	.byte	$C6
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$21
	.byte	$B5
	.byte	$00
	.byte	$21
	.byte	$D3
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$B5
	.byte	$00
	.byte	$37
	.byte	$B5
	.byte	$37
	.byte	$00
	.byte	$2F
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$DF
	.byte	$44
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$1F
	.byte	$00
	.byte	$01
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_frameCounter:
	.res	1,$00
_input:
	.res	1,$00
_wait:
	.res	1,$00
_px:
	.res	1,$00
_py:
	.res	1,$00
_ptr:
	.res	1,$00
_spr:
	.res	1,$00
_i16:
	.res	2,$00
_gameDone:
	.res	1,$00
_gameClear:
	.res	1,$00
_gamePaused:
	.res	1,$00
_gameLevel:
	.res	1,$00
_bright:
	.res	1,$00
.segment	"BSS"
_updateList:
	.res	49,$00
_map:
	.res	208,$00
_nameRow:
	.res	32,$00
_levelItemsCount:
	.res	1,$00
_levelItemsCollected:
	.res	1,$00
_percentCollected:
	.res	1,$00
_totalItemsCollected5:
	.res	1,$00
_totalItemsCollected4:
	.res	1,$00
_totalItemsCollected3:
	.res	1,$00
_totalItemsCollected2:
	.res	1,$00
_totalItemsCollected1:
	.res	1,$00
_player_x:
	.res	2,$00
_player_y:
	.res	2,$00
_player_nextTileX:
	.res	1,$00
_player_nextTileY:
	.res	1,$00
_player_prevTileX:
	.res	1,$00
_player_prevTileY:
	.res	1,$00
_player_dir:
	.res	1,$00
_player_nextDir:
	.res	1,$00
_player_moveCounter:
	.res	2,$00
_player_speed:
	.res	2,$00
_exit_x:
	.res	2,$00
_exit_y:
	.res	2,$00
_levelDone:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ pal_fade_to (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pal_fade_to: near

	.dbg	func, "pal_fade_to", "00", extern, "_pal_fade_to"
	.dbg	sym, "to", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "main.c", 65
	jsr     pushax
;
; if (!to) music_stop();
;
	.dbg	line, "main.c", 66
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L000D
	jsr     _music_stop
;
; while (bright != to)
;
	.dbg	line, "main.c", 68
	jmp     L000D
;
; delay(4);
;
	.dbg	line, "main.c", 70
L000B:	lda     #$04
	jsr     _delay
;
; if (bright<to)  ++bright;
;
	.dbg	line, "main.c", 71
	ldx     #$00
	lda     _bright
	ldy     #$00
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L0AF2
	inc     _bright
;
; else    --bright;
;
	.dbg	line, "main.c", 72
	jmp     L0AF1
L0AF2:	dec     _bright
;
; pal_bright(bright);
;
	.dbg	line, "main.c", 73
L0AF1:	lda     _bright
	jsr     _pal_bright
;
; while (bright != to)
;
	.dbg	line, "main.c", 68
L000D:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L000B
	cmp     _bright
	bne     L000B
;
; if (!bright)
;
	.dbg	line, "main.c", 76
	lda     _bright
	bne     L0018
;
; ppu_off();
;
	.dbg	line, "main.c", 78
	jsr     _ppu_off
;
; set_vram_update(NULL);
;
	.dbg	line, "main.c", 79
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; scroll(0,0);
;
	.dbg	line, "main.c", 80
	jsr     push0
	jsr     _scroll
;
; }
;
	.dbg	line, "main.c", 82
L0018:	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ titlePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_titlePhase: near

	.dbg	func, "titlePhase", "00", extern, "_titlePhase"

.segment	"CODE"

;
; i = 0;
;
	.dbg	line, "titlePhase.h", 24
	lda     #$00
	sta     _i
;
; j = 4;
;
	.dbg	line, "titlePhase.h", 25
	lda     #$04
	sta     _j
;
; pal_bright(i);
;
	.dbg	line, "titlePhase.h", 28
	lda     _i
	jsr     _pal_bright
;
; scroll(0, 0);
;
	.dbg	line, "titlePhase.h", 31
	jsr     push0
	jsr     _scroll
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "titlePhase.h", 34
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_nam);
;
	.dbg	line, "titlePhase.h", 35
	lda     #<(_title_nam)
	ldx     #>(_title_nam)
	jsr     _vram_unrle
;
; pal_bg(palTitle);
;
	.dbg	line, "titlePhase.h", 37
	lda     #<(_palTitle)
	ldx     #>(_palTitle)
	jsr     _pal_bg
;
; ppu_on_bg();
;
	.dbg	line, "titlePhase.h", 39
	jsr     _ppu_on_bg
;
; frameCounter = 0;
;
	.dbg	line, "titlePhase.h", 42
	lda     #$00
	sta     _frameCounter
;
; ppu_wait_frame();
;
	.dbg	line, "titlePhase.h", 46
L0142:	jsr     _ppu_wait_frame
;
; if (pad_trigger(0)&PAD_START) break;
;
	.dbg	line, "titlePhase.h", 49
	lda     #$00
	jsr     _pad_trigger
	and     #$08
	bne     L0143
;
; frameCounter++;
;
	.dbg	line, "titlePhase.h", 52
	inc     _frameCounter
;
; if (i < j)
;
	.dbg	line, "titlePhase.h", 56
	lda     _i
	cmp     _j
	bcs     L014B
;
; if (!(frameCounter&7))
;
	.dbg	line, "titlePhase.h", 59
	lda     _frameCounter
	and     #$07
	bne     L0142
;
; i++;
;
	.dbg	line, "titlePhase.h", 61
	inc     _i
;
; pal_bright(i);
;
	.dbg	line, "titlePhase.h", 62
	lda     _i
	jsr     _pal_bright
;
; else
;
	.dbg	line, "titlePhase.h", 66
	jmp     L0142
;
; pal_col(PRESS_START_PAL_INDEX, (frameCounter&32) ? 0x0f : 0x22);
;
	.dbg	line, "titlePhase.h", 69
L014B:	lda     #$06
	jsr     pusha
	lda     _frameCounter
	and     #$20
	beq     L0AF3
	lda     #$0F
	jmp     L0AF4
L0AF3:	lda     #$22
L0AF4:	jsr     _pal_col
;
; while (1)
;
	.dbg	line, "titlePhase.h", 44
	jmp     L0142
;
; pal_bright(j);
;
	.dbg	line, "titlePhase.h", 74
L0143:	lda     _j
	jsr     _pal_bright
;
; sfx_play(SFX_START, 0);
;
	.dbg	line, "titlePhase.h", 77
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; pal_fade_to(0);
;
	.dbg	line, "titlePhase.h", 88
	ldx     #$00
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ incrementTotalItemsCollected (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_incrementTotalItemsCollected: near

	.dbg	func, "incrementTotalItemsCollected", "00", extern, "_incrementTotalItemsCollected"

.segment	"CODE"

;
; totalItemsCollected1++;
;
	.dbg	line, "gamePhase.h", 148
	inc     _totalItemsCollected1
;
; if (totalItemsCollected1 == 10)
;
	.dbg	line, "gamePhase.h", 149
	lda     _totalItemsCollected1
	cmp     #$0A
	bne     L0AF5
;
; totalItemsCollected2++;
;
	.dbg	line, "gamePhase.h", 151
	inc     _totalItemsCollected2
;
; totalItemsCollected1 = 0;
;
	.dbg	line, "gamePhase.h", 152
	lda     #$00
	sta     _totalItemsCollected1
;
; if (totalItemsCollected2 == 10)
;
	.dbg	line, "gamePhase.h", 154
L0AF5:	lda     _totalItemsCollected2
	cmp     #$0A
	bne     L0AF6
;
; totalItemsCollected3++;
;
	.dbg	line, "gamePhase.h", 156
	inc     _totalItemsCollected3
;
; totalItemsCollected2 = 0;
;
	.dbg	line, "gamePhase.h", 157
	lda     #$00
	sta     _totalItemsCollected2
;
; if (totalItemsCollected3 == 10)
;
	.dbg	line, "gamePhase.h", 159
L0AF6:	lda     _totalItemsCollected3
	cmp     #$0A
	bne     L0AF7
;
; totalItemsCollected4++;
;
	.dbg	line, "gamePhase.h", 161
	inc     _totalItemsCollected4
;
; totalItemsCollected3 = 0;
;
	.dbg	line, "gamePhase.h", 162
	lda     #$00
	sta     _totalItemsCollected3
;
; if (totalItemsCollected4 == 10)
;
	.dbg	line, "gamePhase.h", 164
L0AF7:	lda     _totalItemsCollected4
	cmp     #$0A
	bne     L0AF8
;
; totalItemsCollected5++;
;
	.dbg	line, "gamePhase.h", 166
	inc     _totalItemsCollected5
;
; totalItemsCollected4 = 0;
;
	.dbg	line, "gamePhase.h", 167
	lda     #$00
	sta     _totalItemsCollected4
;
; if (totalItemsCollected5 == 10)
;
	.dbg	line, "gamePhase.h", 169
L0AF8:	lda     _totalItemsCollected5
	cmp     #$0A
	bne     L07DF
;
; totalItemsCollected1 = 9;
;
	.dbg	line, "gamePhase.h", 171
	lda     #$09
	sta     _totalItemsCollected1
;
; totalItemsCollected2 = 9;
;
	.dbg	line, "gamePhase.h", 172
	sta     _totalItemsCollected2
;
; totalItemsCollected3 = 9;
;
	.dbg	line, "gamePhase.h", 173
	sta     _totalItemsCollected3
;
; totalItemsCollected4 = 9;
;
	.dbg	line, "gamePhase.h", 174
	sta     _totalItemsCollected4
;
; totalItemsCollected5 = 9;
;
	.dbg	line, "gamePhase.h", 175
	sta     _totalItemsCollected5
;
; }
;
	.dbg	line, "gamePhase.h", 177
L07DF:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ updateHUD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateHUD: near

	.dbg	func, "updateHUD", "00", extern, "_updateHUD"

.segment	"CODE"

;
; updateList[26] = 0x10 + totalItemsCollected5;
;
	.dbg	line, "gamePhase.h", 183
	lda     _totalItemsCollected5
	clc
	adc     #$10
	sta     _updateList+26
;
; updateList[29] = 0x10 + totalItemsCollected4;
;
	.dbg	line, "gamePhase.h", 184
	lda     _totalItemsCollected4
	clc
	adc     #$10
	sta     _updateList+29
;
; updateList[32] = 0x10 + totalItemsCollected3;
;
	.dbg	line, "gamePhase.h", 185
	lda     _totalItemsCollected3
	clc
	adc     #$10
	sta     _updateList+32
;
; updateList[35] = 0x10 + totalItemsCollected2;
;
	.dbg	line, "gamePhase.h", 186
	lda     _totalItemsCollected2
	clc
	adc     #$10
	sta     _updateList+35
;
; updateList[38] = 0x10 + totalItemsCollected1;
;
	.dbg	line, "gamePhase.h", 187
	lda     _totalItemsCollected1
	clc
	adc     #$10
	sta     _updateList+38
;
; updateList[41] = 0x10 + percentCollected/100;
;
	.dbg	line, "gamePhase.h", 189
	lda     _percentCollected
	jsr     pusha0
	lda     #$64
	jsr     tosudiva0
	clc
	adc     #$10
	sta     _updateList+41
;
; updateList[44] = 0x10 + percentCollected/10%10;
;
	.dbg	line, "gamePhase.h", 190
	lda     _percentCollected
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _updateList+44
;
; updateList[47] = 0x10 + percentCollected%10;
;
	.dbg	line, "gamePhase.h", 191
	lda     _percentCollected
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _updateList+47
;
; }
;
	.dbg	line, "gamePhase.h", 192
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ checkPlayerMove (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkPlayerMove: near

	.dbg	func, "checkPlayerMove", "00", extern, "_checkPlayerMove"
	.dbg	sym, "dir", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "gamePhase.h", 197
	jsr     pusha
;
; px = player_x >> TILE_PLUS_FP_BITS;
;
	.dbg	line, "gamePhase.h", 198
	lda     _player_x+1
	sta     _px
;
; py = player_y >> TILE_PLUS_FP_BITS;
;
	.dbg	line, "gamePhase.h", 199
	lda     _player_y+1
	sta     _py
;
; if (px == 0 && dir == DIR_LEFT) return;
;
	.dbg	line, "gamePhase.h", 203
	lda     _px
	bne     L0B01
	tay
	lda     (sp),y
	cmp     #$40
	beq     L080C
	jmp     L0B01
;
; switch (dir)
;
	.dbg	line, "gamePhase.h", 205
L0B01:	ldx     #$00
	lda     (sp,x)
;
; }
;
	.dbg	line, "gamePhase.h", 211
	cmp     #$10
	beq     L0AFE
	cmp     #$20
	beq     L0AFF
	cmp     #$40
	beq     L0AFC
	cmp     #$80
	beq     L0AFD
	jmp     L0B00
;
; case DIR_LEFT: --px; break;
;
	.dbg	line, "gamePhase.h", 207
L0AFC:	dec     _px
	jmp     L0B00
;
; case DIR_RIGHT: ++px; break;
;
	.dbg	line, "gamePhase.h", 208
L0AFD:	inc     _px
	jmp     L0B00
;
; case DIR_UP: --py; break;
;
	.dbg	line, "gamePhase.h", 209
L0AFE:	dec     _py
	jmp     L0B00
;
; case DIR_DOWN: ++py; break;
;
	.dbg	line, "gamePhase.h", 210
L0AFF:	inc     _py
;
; if (map[MAP_ADR(px,py)] == TILE_WALL) return;
;
	.dbg	line, "gamePhase.h", 213
L0B00:	lda     _py
	sec
	sbc     #$02
	bcs     L082D
	dex
L082D:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _px
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	cmp     #$40
	beq     L080C
;
; player_nextTileX = px;
;
	.dbg	line, "gamePhase.h", 215
	lda     _px
	sta     _player_nextTileX
;
; player_nextTileY = py;
;
	.dbg	line, "gamePhase.h", 216
	lda     _py
	sta     _player_nextTileY
;
; player_moveCounter = TILE_SIZE << FP_BITS;
;
	.dbg	line, "gamePhase.h", 218
	ldx     #$01
	lda     #$00
	sta     _player_moveCounter
	stx     _player_moveCounter+1
;
; player_dir = dir;
;
	.dbg	line, "gamePhase.h", 219
	tay
	lda     (sp),y
	sta     _player_dir
;
; player_nextDir = dir;
;
	.dbg	line, "gamePhase.h", 220
	lda     (sp),y
	sta     _player_nextDir
;
; }
;
	.dbg	line, "gamePhase.h", 221
L080C:	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ initGameMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initGameMap: near

	.dbg	func, "initGameMap", "00", extern, "_initGameMap"

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "gamePhase.h", 227
	jsr     _oam_clear
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "gamePhase.h", 230
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(gameLevel == 0 ? level_test2 : level_test);
;
	.dbg	line, "gamePhase.h", 232
	lda     _gameLevel
	bne     L083F
	lda     #<(_level_test2)
	ldx     #>(_level_test2)
	jmp     L0841
L083F:	lda     #<(_level_test)
	ldx     #>(_level_test)
L0841:	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_A + HUD_LABELS_POS);
;
	.dbg	line, "gamePhase.h", 235
	ldx     #$20
	lda     #$44
	jsr     _vram_adr
;
; vram_write((unsigned char*)hudLabels, HUD_LABELS_LEN);
;
	.dbg	line, "gamePhase.h", 236
	lda     #<(_hudLabels)
	ldx     #>(_hudLabels)
	jsr     pushax
	ldx     #$00
	lda     #$17
	jsr     _vram_write
;
; pal_bg(pal_level_test);
;
	.dbg	line, "gamePhase.h", 239
	lda     #<(_pal_level_test)
	ldx     #>(_pal_level_test)
	jsr     _pal_bg
;
; pal_spr(palGameSpr);
;
	.dbg	line, "gamePhase.h", 242
	lda     #<(_palGameSpr)
	ldx     #>(_palGameSpr)
	jsr     _pal_spr
;
; i16 = NAMETABLE_A + MAP_START_ADR;
;
	.dbg	line, "gamePhase.h", 245
	ldx     #$20
	lda     #$80
	sta     _i16
	stx     _i16+1
;
; ptr = 0;
;
	.dbg	line, "gamePhase.h", 246
	lda     #$00
	sta     _ptr
;
; wait = 0;
;
	.dbg	line, "gamePhase.h", 247
	sta     _wait
;
; levelItemsCount = 0;
;
	.dbg	line, "gamePhase.h", 248
	sta     _levelItemsCount
;
; levelItemsCollected = 0;
;
	.dbg	line, "gamePhase.h", 249
	sta     _levelItemsCollected
;
; percentCollected = 0;
;
	.dbg	line, "gamePhase.h", 250
	sta     _percentCollected
;
; if (gameLevel == 0)
;
	.dbg	line, "gamePhase.h", 253
	lda     _gameLevel
	bne     L0B03
;
; totalItemsCollected1 = 0;
;
	.dbg	line, "gamePhase.h", 255
	sta     _totalItemsCollected1
;
; totalItemsCollected2 = 0;
;
	.dbg	line, "gamePhase.h", 256
	sta     _totalItemsCollected2
;
; totalItemsCollected3 = 0;
;
	.dbg	line, "gamePhase.h", 257
	sta     _totalItemsCollected3
;
; totalItemsCollected4 = 0;
;
	.dbg	line, "gamePhase.h", 258
	sta     _totalItemsCollected4
;
; totalItemsCollected5 = 0;
;
	.dbg	line, "gamePhase.h", 259
	sta     _totalItemsCollected5
;
; for (i = 2; i < MAP_HEIGHT+2; ++i)
;
	.dbg	line, "gamePhase.h", 263
L0B03:	lda     #$02
	sta     _i
L0B04:	lda     _i
	cmp     #$0F
	jcs     L0865
;
; vram_adr(i16);
;
	.dbg	line, "gamePhase.h", 266
	lda     _i16
	ldx     _i16+1
	jsr     _vram_adr
;
; vram_read(nameRow, 32);
;
	.dbg	line, "gamePhase.h", 267
	lda     #<(_nameRow)
	ldx     #>(_nameRow)
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _vram_read
;
; vram_adr(i16);
;
	.dbg	line, "gamePhase.h", 269
	lda     _i16
	ldx     _i16+1
	jsr     _vram_adr
;
; for (j = 0; j < MAP_WIDTH<<1; j += 2)
;
	.dbg	line, "gamePhase.h", 272
	lda     #$00
L0B02:	sta     _j
	cmp     #$20
	jcs     L0874
;
; spr = nameRow[j];
;
	.dbg	line, "gamePhase.h", 274
	ldy     _j
	lda     _nameRow,y
	sta     _spr
;
; switch (spr)
;
	.dbg	line, "gamePhase.h", 277
	ldx     #$00
	lda     _spr
;
; }
;
	.dbg	line, "gamePhase.h", 302
	cmp     #$25
	beq     L0B06
	cmp     #$33
	beq     L0B05
	cmp     #$45
	beq     L0B07
	jmp     L0B08
;
; player_x = (j<<3)<<FP_BITS;
;
	.dbg	line, "gamePhase.h", 281
L0B05:	lda     _j
	jsr     aslax3
	jsr     aslax4
	sta     _player_x
	stx     _player_x+1
;
; player_y = (i<<4)<<FP_BITS;
;
	.dbg	line, "gamePhase.h", 282
	ldx     #$00
	lda     _i
	jsr     aslax4
	jsr     aslax4
	sta     _player_y
	stx     _player_y+1
;
; player_prevTileX = player_x;
;
	.dbg	line, "gamePhase.h", 283
	lda     _player_x
	sta     _player_prevTileX
;
; player_prevTileY = player_y;
;
	.dbg	line, "gamePhase.h", 284
	lda     _player_y
	sta     _player_prevTileY
;
; player_dir = DIR_NONE;
;
	.dbg	line, "gamePhase.h", 285
	lda     #$00
	sta     _player_dir
;
; player_nextDir = DIR_NONE;
;
	.dbg	line, "gamePhase.h", 286
	sta     _player_nextDir
;
; player_moveCounter = 0;
;
	.dbg	line, "gamePhase.h", 287
	tax
	sta     _player_moveCounter
	sta     _player_moveCounter+1
;
; player_speed = (START_SPEED + SPEED_UP_PER_LEVEL*gameLevel)<<FP_BITS;
;
	.dbg	line, "gamePhase.h", 289
	lda     _gameLevel
	clc
	adc     #$02
	bcc     L0898
	inx
L0898:	jsr     shlax4
	sta     _player_speed
	stx     _player_speed+1
;
; spr = TILE_EMPTY;
;
	.dbg	line, "gamePhase.h", 291
	lda     #$44
	sta     _spr
;
; break;
;
	.dbg	line, "gamePhase.h", 292
	jmp     L0B08
;
; exit_x = (j<<3)<<FP_BITS;
;
	.dbg	line, "gamePhase.h", 295
L0B06:	lda     _j
	jsr     aslax3
	jsr     aslax4
	sta     _exit_x
	stx     _exit_x+1
;
; exit_y = (i<<4)<<FP_BITS;
;
	.dbg	line, "gamePhase.h", 296
	ldx     #$00
	lda     _i
	jsr     aslax4
	jsr     aslax4
	sta     _exit_y
	stx     _exit_y+1
;
; break;
;
	.dbg	line, "gamePhase.h", 297
	jmp     L0B08
;
; ++levelItemsCount;
;
	.dbg	line, "gamePhase.h", 300
L0B07:	inc     _levelItemsCount
;
; map[ptr++] = spr;
;
	.dbg	line, "gamePhase.h", 305
L0B08:	lda     _ptr
	inc     _ptr
	clc
	adc     #<(_map)
	sta     ptr1
	lda     #$00
	adc     #>(_map)
	sta     ptr1+1
	lda     _spr
	ldy     #$00
	sta     (ptr1),y
;
; vram_put(spr);
;
	.dbg	line, "gamePhase.h", 308
	lda     _spr
	jsr     _vram_put
;
; vram_put(nameRow[j+1]);
;
	.dbg	line, "gamePhase.h", 310
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L08AE
	inx
L08AE:	sta     ptr1
	txa
	clc
	adc     #>(_nameRow)
	sta     ptr1+1
	ldy     #<(_nameRow)
	lda     (ptr1),y
	jsr     _vram_put
;
; for (j = 0; j < MAP_WIDTH<<1; j += 2)
;
	.dbg	line, "gamePhase.h", 272
	lda     #$02
	clc
	adc     _j
	jmp     L0B02
;
; i16 += 64; // 32 * 2, with 32 being offset for byte row, and 2 being tile height (2 bytes)
;
	.dbg	line, "gamePhase.h", 314
L0874:	lda     #$40
	clc
	adc     _i16
	sta     _i16
	bcc     L08B1
	inc     _i16+1
;
; for (i = 2; i < MAP_HEIGHT+2; ++i)
;
	.dbg	line, "gamePhase.h", 263
L08B1:	inc     _i
	jmp     L0B04
;
; memcpy(updateList, updateListData, sizeof(updateListData));
;
	.dbg	line, "gamePhase.h", 318
L0865:	lda     #<(_updateList)
	ldx     #>(_updateList)
	jsr     pushax
	lda     #<(_updateListData)
	ldx     #>(_updateListData)
	jsr     pushax
	ldx     #$00
	lda     #$31
	jsr     _memcpy
;
; set_vram_update(updateList);
;
	.dbg	line, "gamePhase.h", 319
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jmp     _set_vram_update
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ gamePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gamePhase: near

	.dbg	func, "gamePhase", "00", extern, "_gamePhase"

.segment	"CODE"

;
; pal_bright(0);
;
	.dbg	line, "gamePhase.h", 342
	lda     #$00
	jsr     _pal_bright
;
; initGameMap();
;
	.dbg	line, "gamePhase.h", 345
	jsr     _initGameMap
;
; wait = START_DELAY;
;
	.dbg	line, "gamePhase.h", 348
	lda     #$0A
	sta     _wait
;
; ppu_on_all();
;
	.dbg	line, "gamePhase.h", 351
	jsr     _ppu_on_all
;
; if (gameLevel > 0)
;
	.dbg	line, "gamePhase.h", 354
	lda     _gameLevel
	beq     L0B11
;
; updateHUD();
;
	.dbg	line, "gamePhase.h", 356
	jsr     _updateHUD
;
; levelDone = FALSE;
;
	.dbg	line, "gamePhase.h", 359
	lda     #$00
L0B11:	sta     _levelDone
;
; frameCounter = 0;
;
	.dbg	line, "gamePhase.h", 360
	sta     _frameCounter
;
; oam_meta_spr(player_x >> FP_BITS,
;
	.dbg	line, "gamePhase.h", 365
L08C7:	jsr     decsp3
	lda     _player_x
	ldx     _player_x+1
	jsr     shrax4
	ldy     #$02
	sta     (sp),y
;
; player_y >> FP_BITS,
;
	.dbg	line, "gamePhase.h", 366
	lda     _player_y
	ldx     _player_y+1
	jsr     shrax4
	dey
	sta     (sp),y
;
; 0,
;
	.dbg	line, "gamePhase.h", 367
	lda     #$00
	dey
	sta     (sp),y
;
; playerMetasprite);
;
	.dbg	line, "gamePhase.h", 368
	lda     #<(_playerMetasprite)
	ldx     #>(_playerMetasprite)
	jsr     _oam_meta_spr
;
; if (levelDone) break;
;
	.dbg	line, "gamePhase.h", 371
	lda     _levelDone
	jne     L08C8
;
; ppu_wait_frame();
;
	.dbg	line, "gamePhase.h", 375
	jsr     _ppu_wait_frame
;
; ++frameCounter;
;
	.dbg	line, "gamePhase.h", 377
	inc     _frameCounter
;
; if (!(frameCounter&3))
;
	.dbg	line, "gamePhase.h", 380
	lda     _frameCounter
	and     #$03
	bne     L08D4
;
; if (!gamePaused && bright < 4) ++bright;
;
	.dbg	line, "gamePhase.h", 382
	lda     _gamePaused
	bne     L08D7
	lda     _bright
	cmp     #$04
	bcs     L08D7
	inc     _bright
;
; if ( gamePaused && bright > 2) --bright;
;
	.dbg	line, "gamePhase.h", 383
L08D7:	lda     _gamePaused
	beq     L08DC
	lda     _bright
	cmp     #$03
	bcc     L08DC
	dec     _bright
;
; pal_bright(bright);
;
	.dbg	line, "gamePhase.h", 384
L08DC:	lda     _bright
	jsr     _pal_bright
;
; input = pad_trigger(0);
;
	.dbg	line, "gamePhase.h", 388
L08D4:	lda     #$00
	jsr     _pad_trigger
	sta     _input
;
; if (input&PAD_START)
;
	.dbg	line, "gamePhase.h", 391
	and     #$08
	beq     L08E6
;
; gamePaused ^= TRUE;
;
	.dbg	line, "gamePhase.h", 393
	lda     _gamePaused
	eor     #$01
	sta     _gamePaused
;
; music_pause(gamePaused);
;
	.dbg	line, "gamePhase.h", 394
	jsr     _music_pause
;
; if (gamePaused) continue;
;
	.dbg	line, "gamePhase.h", 398
L08E6:	lda     _gamePaused
	bne     L08C7
;
; bank_bg((frameCounter >> 4)&1);
;
	.dbg	line, "gamePhase.h", 401
	lda     _frameCounter
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     _bank_bg
;
; bank_spr((frameCounter >> 3)&1); // Faster switching for sprites
;
	.dbg	line, "gamePhase.h", 402
	lda     _frameCounter
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     _bank_spr
;
; if (wait)
;
	.dbg	line, "gamePhase.h", 404
	lda     _wait
	beq     L08F7
;
; --wait;
;
	.dbg	line, "gamePhase.h", 406
	dec     _wait
;
; if (!wait)
;
	.dbg	line, "gamePhase.h", 407
	bne     L08F7
;
; music_play(MUSIC_GAME);
;
	.dbg	line, "gamePhase.h", 410
	lda     #$01
	jsr     _music_play
;
; if (player_moveCounter != 0)
;
	.dbg	line, "gamePhase.h", 415
L08F7:	lda     _player_moveCounter
	ora     _player_moveCounter+1
	jeq     L0B1D
;
; switch (player_dir)
;
	.dbg	line, "gamePhase.h", 418
	lda     _player_dir
;
; }
;
	.dbg	line, "gamePhase.h", 424
	cmp     #$10
	beq     L090E
	cmp     #$20
	beq     L090A
	cmp     #$40
	beq     L0906
	cmp     #$80
	bne     L0900
;
; case DIR_RIGHT: player_x += player_speed; break;
;
	.dbg	line, "gamePhase.h", 420
	lda     _player_speed
	clc
	adc     _player_x
	sta     _player_x
	lda     _player_speed+1
	adc     _player_x+1
	sta     _player_x+1
	jmp     L0900
;
; case DIR_LEFT: player_x -= player_speed; break;
;
	.dbg	line, "gamePhase.h", 421
L0906:	lda     _player_speed
	eor     #$FF
	sec
	adc     _player_x
	sta     _player_x
	lda     _player_speed+1
	eor     #$FF
	adc     _player_x+1
	sta     _player_x+1
	jmp     L0900
;
; case DIR_DOWN: player_y += player_speed; break;
;
	.dbg	line, "gamePhase.h", 422
L090A:	lda     _player_speed
	clc
	adc     _player_y
	sta     _player_y
	lda     _player_speed+1
	jmp     L0B26
;
; case DIR_UP: player_y -= player_speed; break;
;
	.dbg	line, "gamePhase.h", 423
L090E:	lda     _player_speed
	eor     #$FF
	sec
	adc     _player_y
	sta     _player_y
	lda     _player_speed+1
	eor     #$FF
L0B26:	adc     _player_y+1
	sta     _player_y+1
;
; player_moveCounter -= player_speed;
;
	.dbg	line, "gamePhase.h", 426
L0900:	lda     _player_speed
	eor     #$FF
	sec
	adc     _player_moveCounter
	sta     _player_moveCounter
	lda     _player_speed+1
	eor     #$FF
	adc     _player_moveCounter+1
	sta     _player_moveCounter+1
;
; if (player_moveCounter <= 0)
;
	.dbg	line, "gamePhase.h", 429
	lda     _player_moveCounter
	cmp     #$01
	lda     _player_moveCounter+1
	sbc     #$00
	bvc     L0915
	eor     #$80
L0915:	asl     a
	lda     #$00
	jcc     L0B1D
;
; player_moveCounter = 0;
;
	.dbg	line, "gamePhase.h", 431
	sta     _player_moveCounter
	sta     _player_moveCounter+1
;
; player_x = player_nextTileX << TILE_PLUS_FP_BITS;
;
	.dbg	line, "gamePhase.h", 441
	lda     _player_nextTileX
	sta     _player_x+1
	lda     #$00
	sta     _player_x
;
; player_y = player_nextTileY << TILE_PLUS_FP_BITS;
;
	.dbg	line, "gamePhase.h", 442
	lda     _player_nextTileY
	sta     _player_y+1
	lda     #$00
	sta     _player_y
;
; if (player_x == exit_x && player_y == exit_y)
;
	.dbg	line, "gamePhase.h", 445
	lda     _exit_x
	ldx     _exit_x+1
	cpx     _player_x+1
	bne     L0B25
	cmp     _player_x
	bne     L0B25
	lda     _exit_y
	ldx     _exit_y+1
	cpx     _player_y+1
	bne     L0B25
	cmp     _player_y
	bne     L0B25
;
; gameClear = TRUE;
;
	.dbg	line, "gamePhase.h", 447
	lda     #$01
	sta     _gameClear
;
; levelDone = TRUE;
;
	.dbg	line, "gamePhase.h", 448
	sta     _levelDone
;
; i16 = MAP_ADR(player_nextTileX, player_nextTileY);
;
	.dbg	line, "gamePhase.h", 451
L0B25:	ldx     #$00
	lda     _player_nextTileY
	sec
	sbc     #$02
	bcs     L092C
	dex
L092C:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _player_nextTileX
	ora     ptr1
	sta     _i16
	lda     ptr1+1
	sta     _i16+1
;
; switch (map[i16])
;
	.dbg	line, "gamePhase.h", 452
	lda     #<(_map)
	sta     ptr1
	lda     #>(_map)
	clc
	adc     _i16+1
	sta     ptr1+1
	ldy     _i16
	ldx     #$00
	lda     (ptr1),y
;
; }
;
	.dbg	line, "gamePhase.h", 499
	beq     L0B19
	cmp     #$45
	beq     L0939
	jmp     L0B1A
;
; gameClear = FALSE;
;
	.dbg	line, "gamePhase.h", 456
L0B19:	sta     _gameClear
;
; levelDone = TRUE;
;
	.dbg	line, "gamePhase.h", 457
	lda     #$01
	sta     _levelDone
;
; break;
;
	.dbg	line, "gamePhase.h", 458
	jmp     L0B1A
;
; map[i16] = TILE_EMPTY;
;
	.dbg	line, "gamePhase.h", 463
L0939:	lda     #<(_map)
	clc
	adc     _i16
	sta     ptr1
	lda     #>(_map)
	adc     _i16+1
	sta     ptr1+1
	lda     #$44
	ldy     #$00
	sta     (ptr1),y
;
; sfx_play(SFX_ITEM, 2);
;
	.dbg	line, "gamePhase.h", 466
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; ++levelItemsCollected;
;
	.dbg	line, "gamePhase.h", 468
	inc     _levelItemsCollected
;
; percentCollected = levelItemsCollected*100/levelItemsCount;
;
	.dbg	line, "gamePhase.h", 471
	lda     _levelItemsCollected
	jsr     pusha0
	lda     #$64
	jsr     tosumula0
	jsr     pushax
	lda     _levelItemsCount
	jsr     tosudiva0
	sta     _percentCollected
;
; incrementTotalItemsCollected();
;
	.dbg	line, "gamePhase.h", 474
	jsr     _incrementTotalItemsCollected
;
; ((player_nextTileY - 2) << 6) | (player_nextTileX << 1);
;
	.dbg	line, "gamePhase.h", 479
	ldx     #$00
	lda     _player_nextTileY
	sec
	sbc     #$02
	bcs     L0948
	dex
L0948:	jsr     shlax4
	jsr     shlax2
	clc
	adc     #$80
	sta     ptr1
	txa
	adc     #$20
	sta     ptr1+1
	ldx     #$00
	lda     _player_nextTileX
	asl     a
	bcc     L0B09
	inx
L0B09:	ora     ptr1
	sta     _i16
	txa
	ora     ptr1+1
	sta     _i16+1
;
; updateList[0] = i16 >> 8;  // MSB
;
	.dbg	line, "gamePhase.h", 483
	sta     _updateList
;
; updateList[1] = i16 & 0xff;  // LSB
;
	.dbg	line, "gamePhase.h", 484
	lda     _i16
	sta     _updateList+1
;
; updateList[3] = updateList[0];
;
	.dbg	line, "gamePhase.h", 486
	lda     _updateList
	sta     _updateList+3
;
; updateList[4] = updateList[1] + 1; // Element next to upper left
;
	.dbg	line, "gamePhase.h", 487
	lda     _updateList+1
	clc
	adc     #$01
	sta     _updateList+4
;
; i16 += 32;
;
	.dbg	line, "gamePhase.h", 488
	lda     #$20
	clc
	adc     _i16
	sta     _i16
	bcc     L095B
	inc     _i16+1
;
; updateList[6] = i16 >> 8;
;
	.dbg	line, "gamePhase.h", 490
L095B:	lda     _i16+1
	sta     _updateList+6
;
; updateList[7] = i16 & 0xff;
;
	.dbg	line, "gamePhase.h", 491
	lda     _i16
	sta     _updateList+7
;
; updateList[9] = updateList[6];
;
	.dbg	line, "gamePhase.h", 493
	lda     _updateList+6
	sta     _updateList+9
;
; updateList[10] = updateList[7] + 1; // Element next to lower left
;
	.dbg	line, "gamePhase.h", 494
	lda     _updateList+7
	clc
	adc     #$01
	sta     _updateList+10
;
; updateHUD();
;
	.dbg	line, "gamePhase.h", 497
	jsr     _updateHUD
;
; i16 = MAP_ADR(player_prevTileX, player_prevTileY);
;
	.dbg	line, "gamePhase.h", 502
	ldx     #$00
L0B1A:	lda     _player_prevTileY
	sec
	sbc     #$02
	bcs     L0972
	dex
L0972:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _player_prevTileX
	ora     ptr1
	sta     _i16
	lda     ptr1+1
	sta     _i16+1
;
; map[i16] = TILE_HOLE;
;
	.dbg	line, "gamePhase.h", 503
	lda     #<(_map)
	clc
	adc     _i16
	sta     ptr1
	lda     #>(_map)
	adc     _i16+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; ((player_prevTileY - 2) << 6) | (player_prevTileX << 1);
;
	.dbg	line, "gamePhase.h", 507
	tax
	lda     _player_prevTileY
	sec
	sbc     #$02
	bcs     L097B
	dex
L097B:	jsr     shlax4
	jsr     shlax2
	clc
	adc     #$80
	sta     ptr1
	txa
	adc     #$20
	sta     ptr1+1
	ldx     #$00
	lda     _player_prevTileX
	asl     a
	bcc     L0B0A
	inx
L0B0A:	ora     ptr1
	sta     _i16
	txa
	ora     ptr1+1
	sta     _i16+1
;
; updateList[12] = i16 >> 8;    // MSB
;
	.dbg	line, "gamePhase.h", 510
	sta     _updateList+12
;
; updateList[13] = i16 & 0xff;   // LSB
;
	.dbg	line, "gamePhase.h", 511
	lda     _i16
	sta     _updateList+13
;
; updateList[15] = updateList[12];
;
	.dbg	line, "gamePhase.h", 513
	lda     _updateList+12
	sta     _updateList+15
;
; updateList[16] = updateList[13] + 1; // Element next to upper left
;
	.dbg	line, "gamePhase.h", 514
	lda     _updateList+13
	clc
	adc     #$01
	sta     _updateList+16
;
; i16 += 32;
;
	.dbg	line, "gamePhase.h", 515
	lda     #$20
	clc
	adc     _i16
	sta     _i16
	bcc     L098E
	inc     _i16+1
;
; updateList[18] = i16 >> 8;
;
	.dbg	line, "gamePhase.h", 517
L098E:	lda     _i16+1
	sta     _updateList+18
;
; updateList[19] = i16 & 0xff;
;
	.dbg	line, "gamePhase.h", 518
	lda     _i16
	sta     _updateList+19
;
; updateList[21] = updateList[18];
;
	.dbg	line, "gamePhase.h", 520
	lda     _updateList+18
	sta     _updateList+21
;
; updateList[22] = updateList[19] + 1; // Element next to lower left
;
	.dbg	line, "gamePhase.h", 521
	lda     _updateList+19
	clc
	adc     #$01
	sta     _updateList+22
;
; player_prevTileX = player_nextTileX;
;
	.dbg	line, "gamePhase.h", 524
	lda     _player_nextTileX
	sta     _player_prevTileX
;
; player_prevTileY = player_nextTileY;
;
	.dbg	line, "gamePhase.h", 525
	lda     _player_nextTileY
	sta     _player_prevTileY
;
; if (updateList[12] == updateList[0] && updateList[13] == updateList[1])
;
	.dbg	line, "gamePhase.h", 529
	lda     _updateList
	cmp     _updateList+12
	bne     L09A2
	lda     _updateList+1
	cmp     _updateList+13
	bne     L09A2
;
; updateList[0] = updateList[3] = updateList[6] = updateList[9] = 0x28;
;
	.dbg	line, "gamePhase.h", 531
	lda     #$28
	sta     _updateList+9
	sta     _updateList+6
	sta     _updateList+3
	sta     _updateList
;
; updateList[1] = updateList[4] = updateList[7] = updateList[10] = 0x00;
;
	.dbg	line, "gamePhase.h", 532
	tya
	sta     _updateList+10
	sta     _updateList+7
	sta     _updateList+4
	sta     _updateList+1
;
; checkPlayerMove(player_nextDir);
;
	.dbg	line, "gamePhase.h", 536
L09A2:	lda     _player_nextDir
	jsr     _checkPlayerMove
;
; j = pad_state(0);
;
	.dbg	line, "gamePhase.h", 541
	lda     #$00
L0B1D:	jsr     _pad_state
	sta     _j
;
; if (player_moveCounter == 0)
;
	.dbg	line, "gamePhase.h", 544
	lda     _player_moveCounter
	ora     _player_moveCounter+1
	bne     L09C1
;
; if (j&PAD_LEFT)  checkPlayerMove(DIR_LEFT);
;
	.dbg	line, "gamePhase.h", 546
	lda     _j
	and     #$40
	beq     L0B1E
	lda     #$40
	jsr     _checkPlayerMove
;
; if (j&PAD_RIGHT) checkPlayerMove(DIR_RIGHT);
;
	.dbg	line, "gamePhase.h", 547
L0B1E:	lda     _j
	and     #$80
	beq     L0B1F
	lda     #$80
	jsr     _checkPlayerMove
;
; if (j&PAD_UP)  checkPlayerMove(DIR_UP);
;
	.dbg	line, "gamePhase.h", 548
L0B1F:	lda     _j
	and     #$10
	beq     L0B20
	lda     #$10
	jsr     _checkPlayerMove
;
; if (j&PAD_DOWN)  checkPlayerMove(DIR_DOWN);
;
	.dbg	line, "gamePhase.h", 549
L0B20:	lda     _j
	and     #$20
	jeq     L08C7
	lda     #$20
	jsr     _checkPlayerMove
;
; else
;
	.dbg	line, "gamePhase.h", 551
	jmp     L08C7
;
; if (j&PAD_LEFT)  player_nextDir = DIR_LEFT;
;
	.dbg	line, "gamePhase.h", 553
L09C1:	lda     _j
	and     #$40
	beq     L0B21
	lda     #$40
	sta     _player_nextDir
;
; if (j&PAD_RIGHT) player_nextDir = DIR_RIGHT;
;
	.dbg	line, "gamePhase.h", 554
L0B21:	lda     _j
	and     #$80
	beq     L0B22
	lda     #$80
	sta     _player_nextDir
;
; if (j&PAD_UP)  player_nextDir = DIR_UP;
;
	.dbg	line, "gamePhase.h", 555
L0B22:	lda     _j
	and     #$10
	beq     L0B23
	lda     #$10
	sta     _player_nextDir
;
; if (j&PAD_DOWN)  player_nextDir = DIR_DOWN;
;
	.dbg	line, "gamePhase.h", 556
L0B23:	lda     _j
	and     #$20
	jeq     L08C7
	lda     #$20
	sta     _player_nextDir
;
; while (1)
;
	.dbg	line, "gamePhase.h", 362
	jmp     L08C7
;
; if (gameClear)
;
	.dbg	line, "gamePhase.h", 561
L08C8:	lda     _gameClear
	beq     L09E5
;
; music_play(MUSIC_CLEAR);
;
	.dbg	line, "gamePhase.h", 563
	lda     #$02
	jsr     _music_play
;
; ++gameLevel;
;
	.dbg	line, "gamePhase.h", 564
	inc     _gameLevel
;
; else
;
	.dbg	line, "gamePhase.h", 566
	jmp     L09EA
;
; music_play(MUSIC_LOSE);
;
	.dbg	line, "gamePhase.h", 568
L09E5:	lda     #$05
	jsr     _music_play
;
; gameDone = TRUE;
;
	.dbg	line, "gamePhase.h", 569
	lda     #$01
	sta     _gameDone
;
; delay(END_DELAY);
;
	.dbg	line, "gamePhase.h", 573
L09EA:	lda     #$50
	jsr     _delay
;
; pal_fade_to(0);
;
	.dbg	line, "gamePhase.h", 576
	ldx     #$00
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ resultPhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resultPhase: near

	.dbg	func, "resultPhase", "00", extern, "_resultPhase"

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "resultPhase.h", 25
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; if (gameClear)
;
	.dbg	line, "resultPhase.h", 26
	lda     _gameClear
	beq     L0ACC
;
; vram_unrle(result_success);
;
	.dbg	line, "resultPhase.h", 28
	lda     #<(_result_success)
	ldx     #>(_result_success)
;
; else
;
	.dbg	line, "resultPhase.h", 30
	jmp     L0B27
;
; vram_unrle(result_failure);
;
	.dbg	line, "resultPhase.h", 32
L0ACC:	lda     #<(_result_failure)
	ldx     #>(_result_failure)
L0B27:	jsr     _vram_unrle
;
; ppu_on_bg();
;
	.dbg	line, "resultPhase.h", 36
	jsr     _ppu_on_bg
;
; pal_fade_to(4);
;
	.dbg	line, "resultPhase.h", 39
	ldx     #$00
	lda     #$04
	jsr     _pal_fade_to
;
; ppu_wait_frame();
;
	.dbg	line, "resultPhase.h", 43
L0AD6:	jsr     _ppu_wait_frame
;
; if (pad_trigger(0)&PAD_START) break;
;
	.dbg	line, "resultPhase.h", 46
	lda     #$00
	jsr     _pad_trigger
	ldx     #$00
	and     #$08
	beq     L0AD6
;
; pal_fade_to(0);
;
	.dbg	line, "resultPhase.h", 49
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; titlePhase();
;
	.dbg	line, "main.c", 93
L0AE1:	jsr     _titlePhase
;
; gameLevel = 0;
;
	.dbg	line, "main.c", 95
	lda     #$00
	sta     _gameLevel
;
; gameDone = FALSE;
;
	.dbg	line, "main.c", 96
	sta     _gameDone
;
; while (!gameDone)
;
	.dbg	line, "main.c", 98
	jmp     L0AEC
;
; gamePhase();
;
	.dbg	line, "main.c", 100
L0AEA:	jsr     _gamePhase
;
; while (!gameDone)
;
	.dbg	line, "main.c", 98
L0AEC:	lda     _gameDone
	beq     L0AEA
;
; resultPhase();
;
	.dbg	line, "main.c", 103
	jsr     _resultPhase
;
; while (1) // Infinite loop
;
	.dbg	line, "main.c", 91
	jmp     L0AE1
	.dbg	line

.endproc

